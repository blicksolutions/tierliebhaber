{% comment %}
  ==============================================================================
  ABlyft A/B-Testing - CORE SCRIPT
  ==============================================================================
  WICHTIG: Im <head> laden um FOOC (Flash of Original Content) zu vermeiden
  Zweck: Variantenauslieferung MUSS vor DOM-Rendering passieren
  ==============================================================================
{% endcomment %}

{% comment %} Preconnect f√ºr schnelleres Laden {% endcomment %}
<link rel="preconnect" href="https://cdn.ablyft.com">
<link rel="dns-prefetch" href="https://cdn.ablyft.com">

{% comment %} Anti-Flicker Snippet {% endcomment %}
<style id="ablyft-anti-flicker">
  body { opacity: 0 !important; transition: opacity 0.2s ease-in; }
</style>

<script>
  // Fallback: Body nach max. 2 Sekunden zeigen
  (function () {
    var timeout = setTimeout(function () {
      var style = document.getElementById('ablyft-anti-flicker');
      if (style && style.parentNode) {
        style.parentNode.removeChild(style);
      }
      document.body.style.opacity = '1';
      console.log('[ABlyft] Anti-flicker timeout reached');
    }, 2000);

    // Wenn ABlyft fr√ºher fertig ist, zeige sofort
    window.ablyftShowBody = function () {
      clearTimeout(timeout);
      var style = document.getElementById('ablyft-anti-flicker');
      if (style && style.parentNode) {
        style.parentNode.removeChild(style);
      }
      document.body.style.opacity = '1';
      console.log('[ABlyft] Body shown');
    };
  })();
</script>

{% comment %} ABlyft Core Script - MIT Consent {% endcomment %}
<script type="text/plain" data-cookieconsent="marketing" async src="https://cdn.ablyft.com/s/55886406.js"></script>

{% comment %} ABlyft Consent-Change Detector - l√§dt OHNE Consent-Requirement {% endcomment %}
{% comment %} ABlyft Consent-Change Detector - l√§dt OHNE Consent-Requirement {% endcomment %}
<script>
(function() {
  'use strict';
  
  console.log('[ABlyft Pre-Consent] Initializing...');
  
  // Check: Hatte User bereits Consent VOR diesem Page Load?
  function hadPreviousConsent() {
    // Check 1: Cookie existiert bereits?
    const cookiebotCookie = document.cookie.match(/CookieConsent=([^;]+)/);
    if (cookiebotCookie) {
      try {
        const cookieValue = decodeURIComponent(cookiebotCookie[1]);
        // Wenn Cookie existiert und marketing consent enth√§lt
        if (cookieValue.includes('marketing:true')) {
          console.log('[ABlyft Pre-Consent] Previous marketing consent found in cookie');
          return true;
        }
      } catch(e) {}
    }
    
    // Check 2: SessionStorage Flag (von vorherigem Page Load in dieser Session)
    if (sessionStorage.getItem('ablyft_had_consent')) {
      console.log('[ABlyft Pre-Consent] Previous consent found in session');
      return true;
    }
    
    console.log('[ABlyft Pre-Consent] No previous consent found');
    return false;
  }
  
  // Speichere Initial-State
  const hadConsentBefore = hadPreviousConsent();
  
  // Flag ob Consent NEU gegeben wurde
  window._ablyftConsentChanged = false;
  
  console.log('[ABlyft Pre-Consent] Had consent before:', hadConsentBefore);
  console.log('[ABlyft Pre-Consent] Registering event listeners...');
  
  // Event Handler
  function handleConsentEvent(eventName) {
    return function(e) {
      console.log('[ABlyft Pre-Consent] ' + eventName + ' event fired');
      
      // NEUE LOGIK: Consent ist NEU wenn vorher KEIN Consent existierte
      if (!hadConsentBefore) {
        console.log('[ABlyft Pre-Consent] ‚úÖ NEW consent detected (no previous consent)');
        window._ablyftConsentChanged = true;
        
        // Markiere dass User jetzt Consent hat
        try {
          sessionStorage.setItem('ablyft_had_consent', 'true');
          sessionStorage.setItem('ablyft_consent_changed', Date.now());
        } catch(e) {}
        
      } else {
        console.log('[ABlyft Pre-Consent] ‚ùå Consent NOT new (reload with existing consent)');
        window._ablyftConsentChanged = false;
      }
      
      // Debug: Zeige Cookiebot-Properties
      if (window.Cookiebot) {
        console.log('[ABlyft Pre-Consent] Debug - Cookiebot.changed:', window.Cookiebot.changed);
        console.log('[ABlyft Pre-Consent] Debug - Cookiebot.hasResponse:', window.Cookiebot.hasResponse);
      }
    };
  }
  
  // Registriere Event Listeners
  window.addEventListener('CookiebotOnAccept', handleConsentEvent('CookiebotOnAccept'), false);
  window.addEventListener('CookiebotOnDecline', handleConsentEvent('CookiebotOnDecline'), false);
  
  console.log('[ABlyft Pre-Consent] Event listeners registered');
  
  // Markiere dass wir Consent-State gecheckt haben
  if (hadConsentBefore) {
    try {
      sessionStorage.setItem('ablyft_had_consent', 'true');
    } catch(e) {}
  }
  
})();
</script>

{% comment %} ABlyft Reload Logic - l√§dt NUR mit Marketing-Consent {% endcomment %}
<script type="text/plain" data-cookieconsent="marketing">
(function() {
  'use strict';
  
  window['ablyft'] = window['ablyft'] || [];
  
  const CONFIG = {
    sessionKey: 'ablyft_reload_done',
    consentChangedKey: 'ablyft_consent_changed',
    waitTime: 600,
    reloadDelay: 100,
    debug: true
  };
  
  function log(message, data) {
    if (CONFIG.debug) {
      console.log('[ABlyft]', message, data || '');
    }
  }
  
  function parseAblyftCookie() {
    const match = document.cookie.match(/ablyft_exps=([^;]+)/);
    if (!match) return null;
    try {
      return JSON.parse(decodeURIComponent(match[1]));
    } catch(e) {
      return null;
    }
  }
  
  function checkForExperiments() {
    const checks = {
      cookie: function() {
        const experiments = parseAblyftCookie();
        return experiments && Object.keys(experiments).length > 0;
      },
      windowObject: function() {
        if (!window.ablyft) return false;
        return !!(
          (window.ablyft.experiments && window.ablyft.experiments.length > 0) ||
          (window.ablyft._experiments && Object.keys(window.ablyft._experiments).length > 0) ||
          window.ablyft._initialized ||
          window.ablyft._ready
        );
      },
      dom: function() {
        return !!(
          document.querySelector('[data-ablyft]') ||
          document.querySelector('[class*="ablyft"]')
        );
      }
    };
    
    const results = {
      cookie: checks.cookie(),
      windowObject: checks.windowObject(),
      dom: checks.dom()
    };
    
    log('Detection:', results);
    return Object.values(results).some(r => r === true);
  }
  
  function init() {
    log('Initializing...');
    
    // Check 1: Bereits reloaded?
    if (sessionStorage.getItem(CONFIG.sessionKey)) {
      log('Already reloaded in this session');
      if (window.ablyftShowBody) window.ablyftShowBody();
      return;
    }
    
    // Check 2: Wurde Consent GE√ÑNDERT?
    const consentWasChanged = window._ablyftConsentChanged === true || 
                              sessionStorage.getItem(CONFIG.consentChangedKey);
    
    if (consentWasChanged) {
      log('‚úÖ NEW consent detected (from pre-consent listener)');
      
      // L√∂sche Flag
      try {
        sessionStorage.removeItem(CONFIG.consentChangedKey);
      } catch(e) {}
      
      log('Waiting for ABlyft...');
      
      setTimeout(function() {
        if (checkForExperiments()) {
          log('üéØ Experiments detected - reloading');
          sessionStorage.setItem(CONFIG.sessionKey, Date.now());
          setTimeout(function() {
            window.location.reload();
          }, CONFIG.reloadDelay);
        } else {
          log('No experiments detected');
          if (window.ablyftShowBody) window.ablyftShowBody();
        }
      }, CONFIG.waitTime);
      
    } else {
      log('‚ùå No new consent - existing consent loaded');
      if (window.ablyftShowBody) window.ablyftShowBody();
    }
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
  
})();
</script>