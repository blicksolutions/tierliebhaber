
(function () {
  'use strict';
  
  window.DEBUG_CONSENT = window.DEBUG_CONSENT || false;
  const log = (...args) => {
    if (window.DEBUG_CONSENT) {
      try {
        console.log('[consent]', ...args);
      } catch (e) {}
    }
  };

  /* ===== Consent Check ===== */
  function hasConsent(cat) {
    try {
      if (window.Cookiebot && Cookiebot.consent) {
        if (cat === 'marketing') return !!Cookiebot.consent.marketing;
        if (cat === 'statistics') return !!Cookiebot.consent.statistics;
        if (cat === 'preferences') return !!Cookiebot.consent.preferences;
        if (cat === 'necessary') return true;
        return false;
      }
      const row = document.cookie.split('; ').find((r) => r.startsWith('CookieConsent='));
      if (!row) return false;
      const v = decodeURIComponent(row.split('=')[1] || '');
      const map = {
        marketing: /marketing:true/.test(v),
        statistics: /statistics:true/.test(v),
        preferences: /preferences:true/.test(v),
      };
      return !!map[cat];
    } catch (e) {
      return false;
    }
  }

  /* ===== Cookie Guard ===== */
  const cookieDesc =
    Object.getOwnPropertyDescriptor(Document.prototype, 'cookie') ||
    Object.getOwnPropertyDescriptor(HTMLDocument.prototype, 'cookie');
  
  if (cookieDesc && cookieDesc.set) {
    try {
      Object.defineProperty(document, 'cookie', {
        configurable: true,
        enumerable: true,
        get: cookieDesc.get,
        set: function (v) {
          try {
            if (v && (/_Elevar/i.test(v) || /__kla_id/i.test(v) || /_ke=/.test(v) || /KL_FORMS/.test(v))) {
              if (!hasConsent('marketing')) {
                log('blocked cookie (marketing)', v);
                return;
              }
            }
          } catch (e) {}
          return cookieDesc.set.call(this, v);
        },
      });
    } catch(e) {
      log('Cookie guard setup failed');
    }
  }

  /* ===== Domain Mapping ===== */
  const MAP = {
    'polyfill-fastly.net': 'preferences',
    'error-analytics-sessions-production.shopifysvc.com': 'statistics',
  };
  const domains = Object.keys(MAP);

  const hostOf = (u) => {
    try {
      return new URL(u, location.href).hostname;
    } catch (e) {
      return '';
    }
  };
  
  const catFor = (u) => {
    try {
      const h = hostOf(u);
      if (!h) return null;
      for (const d of domains) {
        if (h === d || h.endsWith('.' + d)) return MAP[d];
      }
      return null;
    } catch(e) {
      return null;
    }
  };
  
  const shouldBlock = (u) => {
    try {
      const c = catFor(u || '');
      return c ? !hasConsent(c) : false;
    } catch(e) {
      return false;
    }
  };

  /* ===== Script Queue ===== */
  const pending = [];
  const pendingSrcs = new Set();
  
  function copyAttrs(el) {
    const o = {};
    try {
      for (const a of el.attributes || []) {
        try {
          o[a.name] = a.value;
        } catch(e) {}
      }
    } catch(e) {}
    return o;
  }
  
  function queue(el, src) {
    try {
      if (pendingSrcs.has(src)) return;
      
      pending.push({
        src,
        attrs: copyAttrs(el),
        async: el.async,
        defer: el.defer,
        nonce: el.nonce,
        referrerPolicy: el.referrerPolicy,
        crossOrigin: el.crossOrigin,
        integrity: el.integrity,
      });
      pendingSrcs.add(src);
      log('blocked script', src, 'cat:', catFor(src));
    } catch(e) {
      log('queue error');
    }
  }
  
  function release() {
    for (let i = pending.length - 1; i >= 0; i--) {
      try {
        const r = pending[i];
        const c = catFor(r.src || '');
        
        if (!c || hasConsent(c)) {
          const s = document.createElement('script');
          if (r.nonce) s.nonce = r.nonce;
          if (r.async != null) s.async = r.async;
          if (r.defer != null) s.defer = r.defer;
          if (r.referrerPolicy) s.referrerPolicy = r.referrerPolicy;
          if (r.crossOrigin) s.crossOrigin = r.crossOrigin;
          if (r.integrity) s.integrity = r.integrity;
          
          for (const [k, v] of Object.entries(r.attrs || {})) {
            const kk = k.toLowerCase();
            if (!['src', 'async', 'defer', 'nonce', 'referrerpolicy', 'crossorigin', 'integrity', 'type'].includes(kk)) {
              try {
                s.setAttribute(k, v);
              } catch (e) {}
            }
          }
          
          s.src = r.src;
          (document.head || document.documentElement).appendChild(s);
          log('released script', r.src, c);
          
          pending.splice(i, 1);
          pendingSrcs.delete(r.src);
        }
      } catch(e) {
        log('release error');
      }
    }
  }

  /* ===== DOM Interception (KORRIGIERT!) ===== */
  const OrigCreate = document.createElement;
  const OrigAppend = Element.prototype.appendChild;
  const OrigBefore = Element.prototype.insertBefore;
  const OrigSetAttr = Element.prototype.setAttribute;

  document.createElement = function (tag) {
    const el = OrigCreate.call(document, tag);
    try {
      if (String(tag).toLowerCase() === 'script') {
        el.setAttribute = function (name, value) {
          if (String(name).toLowerCase() === 'src' && shouldBlock(value)) {
            queue(el, value);
            return; // ← Kein OrigSetAttr!
          }
          return OrigSetAttr.call(el, name, value);
        };
      }
    } catch(e) {}
    return el;
  };

  Element.prototype.appendChild = function (ch) {
    // WICHTIG: Erst prüfen, DANN try-catch
    if (ch && ch.tagName === 'SCRIPT') {
      try {
        const src = ch.getAttribute && ch.getAttribute('src');
        if (src && shouldBlock(src)) {
          queue(ch, src);
          return ch; // ← Verhindert appendChild
        }
      } catch(e) {
        log('appendChild check error');
        // Bei Fehler: lieber blockieren als durchlassen
        return ch;
      }
    }
    return OrigAppend.call(this, ch);
  };

  Element.prototype.insertBefore = function (n, r) {
    // WICHTIG: Erst prüfen, DANN try-catch
    if (n && n.tagName === 'SCRIPT') {
      try {
        const src = n.getAttribute && n.getAttribute('src');
        if (src && shouldBlock(src)) {
          queue(n, src);
          return n; // ← Verhindert insertBefore
        }
      } catch(e) {
        log('insertBefore check error');
        // Bei Fehler: lieber blockieren als durchlassen
        return n;
      }
    }
    return OrigBefore.call(this, n, r);
  };

  const srcDesc = Object.getOwnPropertyDescriptor(HTMLScriptElement.prototype, 'src');
  if (srcDesc && srcDesc.set) {
    try {
      Object.defineProperty(HTMLScriptElement.prototype, 'src', {
        configurable: true,
        get() {
          return srcDesc.get.call(this);
        },
        set(v) {
          try {
            if (shouldBlock(v)) {
              queue(this, v);
              return v; // ← Verhindert src-Setter
            }
          } catch(e) {
            log('src setter error');
            return v; // ← Bei Fehler: verhindere trotzdem
          }
          return srcDesc.set.call(this, v);
        },
      });
    } catch(e) {
      log('src descriptor patch failed');
    }
  }

  /* ===== Event Listeners ===== */
  window.addEventListener('CookiebotOnConsentReady', release);
  window.addEventListener('CookiebotOnAccept', release);
  window.addEventListener('CookiebotOnDecline', release);
  setTimeout(release, 2000);
})();
