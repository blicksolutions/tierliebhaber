(function(){
  'use strict';
  if (window.__REPLO_CONSENT_GATE_LOADED__) return;
  window.__REPLO_CONSENT_GATE_LOADED__ = true;

  var reploObserver = null;
  var patchInterval = null;
  var enabled = false;

  function hasCookiebot(){ 
    return !!(window.Cookiebot && window.Cookiebot.consent); 
  }
  
  function hasMarketingConsent(){
    try{
      if (!hasCookiebot()) return false;
      return window.Cookiebot.consent.marketing === true;
    }catch(e){ 
      return false; 
    }
  }

  function isReploUrl(url) {
    if (!url) return false;
    try {
      var urlStr = url.toString ? url.toString() : String(url);
      return urlStr.includes('replo.app') || 
             urlStr.includes('replo.io') ||
             urlStr.includes('replohq.com');
    } catch(e) {
      return false;
    }
  }

  var _originalFetch = window.fetch;
  if (!_originalFetch.__reploPatched) {
    window.fetch = function(resource, options) {
      try {
        var url = typeof resource === 'string' ? resource : (resource && resource.url);
        if (isReploUrl(url) && !hasMarketingConsent()) {
          return Promise.reject(new TypeError('Blocked by consent'));
        }
      } catch(e) {}
      return _originalFetch.apply(this, arguments);
    };
    window.fetch.__reploPatched = true;
  }

  var _originalBeacon = navigator.sendBeacon;
  if (_originalBeacon && !_originalBeacon.__reploPatched) {
    navigator.sendBeacon = function(url, data) {
      try {
        if (isReploUrl(url) && !hasMarketingConsent()) {
          return true;
        }
      } catch(e) {}
      return _originalBeacon.call(this, url, data);
    };
    navigator.sendBeacon.__reploPatched = true;
  }

  var _originalOpen = XMLHttpRequest.prototype.open;
  var _originalSend = XMLHttpRequest.prototype.send;
  
  if (!XMLHttpRequest.prototype.__reploPatched) {
    XMLHttpRequest.prototype.open = function(method, url) {
      try {
        this.__reploBlocked = isReploUrl(url) && !hasMarketingConsent();
        if (this.__reploBlocked) {
          this.readyState = 1;
          return;
        }
      } catch(e) {}
      return _originalOpen.apply(this, arguments);
    };
    
    XMLHttpRequest.prototype.send = function(data) {
      if (this.__reploBlocked) {
        var self = this;
        setTimeout(function(){
          try {
            self.readyState = 4;
            self.status = 200;
            self.statusText = 'OK';
            self.responseText = '{"success":true}';
            if (self.onreadystatechange) self.onreadystatechange();
            if (self.onload) self.onload();
          } catch(e) {}
        }, 0);
        return;
      }
      return _originalSend.apply(this, arguments);
    };
    
    XMLHttpRequest.prototype.__reploPatched = true;
  }

  var _appendChild = Element.prototype.appendChild;
  if (!_appendChild.__reploPatched) {
    Element.prototype.appendChild = function(child) {
      var shouldBlock = false;
      try {
        if (child && child.tagName === 'SCRIPT') {
          var src = child.src || (child.getAttribute && child.getAttribute('src'));
          if (src && isReploUrl(src) && !hasMarketingConsent()) {
            shouldBlock = true;
          }
        }
      } catch(e) {}
      
      if (shouldBlock) return child;
      return _appendChild.call(this, child);
    };
    Element.prototype.appendChild.__reploPatched = true;
  }

  var _insertBefore = Element.prototype.insertBefore;
  if (!_insertBefore.__reploPatched) {
    Element.prototype.insertBefore = function(child, ref) {
      var shouldBlock = false;
      try {
        if (child && child.tagName === 'SCRIPT') {
          var src = child.src || (child.getAttribute && child.getAttribute('src'));
          if (src && isReploUrl(src) && !hasMarketingConsent()) {
            shouldBlock = true;
          }
        }
      } catch(e) {}
      
      if (shouldBlock) return child;
      return _insertBefore.call(this, child, ref);
    };
    Element.prototype.insertBefore.__reploPatched = true;
  }

  reploObserver = new MutationObserver(function(mutations) {
    if (hasMarketingConsent() || enabled) return;
    
    mutations.forEach(function(mutation) {
      if (!mutation.addedNodes) return;
      mutation.addedNodes.forEach(function(node) {
        try {
          if (node.tagName === 'SCRIPT') {
            var src = node.src || (node.getAttribute && node.getAttribute('src'));
            if (src && isReploUrl(src)) {
              node.remove();
            }
          }
        } catch(e) {}
      });
    });
  });
  
  try {
    reploObserver.observe(document.documentElement, {
      childList: true,
      subtree: true
    });
  } catch(e) {}

  function patchShopifyWebPixels() {
    try {
      if (!window.Shopify) window.Shopify = {};
      if (!window.Shopify.analytics) window.Shopify.analytics = {};
      
      if (!window.Shopify.analytics.__reploPatched) {
        var _originalPublish = window.Shopify.analytics.publish;
        
        window.Shopify.analytics.publish = function(eventName, eventData) {
          if (!hasMarketingConsent()) return;
          
          if (_originalPublish && typeof _originalPublish === 'function') {
            return _originalPublish.apply(this, arguments);
          }
        };
        window.Shopify.analytics.__reploPatched = true;
      }
    } catch(e) {}
  }

  patchShopifyWebPixels();
  
  patchInterval = setInterval(function() {
    if (enabled || hasMarketingConsent()) {
      clearInterval(patchInterval);
      patchInterval = null;
      return;
    }
    patchShopifyWebPixels();
  }, 100);

  function enableReplo() {
    if (enabled) return;
    if (!hasMarketingConsent()) return;
    
    enabled = true;
    
    if (patchInterval) {
      clearInterval(patchInterval);
      patchInterval = null;
    }
    
    if (reploObserver) {
      try {
        reploObserver.disconnect();
      } catch(e) {}
      reploObserver = null;
    }
  }

  window.addEventListener('CookiebotOnAccept', enableReplo);
  window.addEventListener('CookiebotOnLoad', enableReplo);
  window.addEventListener('CookiebotOnConsentReady', enableReplo);

  if (hasMarketingConsent()) {
    enableReplo();
  }
  
  document.addEventListener('DOMContentLoaded', function() {
    if (hasMarketingConsent() && !enabled) {
      enableReplo();
    }
  });
})();