  (function () {
    /* ================= Helpers / Consent ================= */
    const log = (...a) => {
      try {
        console.debug('[TYPEFORM CONSENT]', ...a);
      } catch (e) {}
    };

    function hasMarketingConsent() {
      try {
        if (typeof Cookiebot !== 'undefined') {
          if (Cookiebot.consents && typeof Cookiebot.consents.marketing === 'boolean')
            return Cookiebot.consents.marketing;
          if (Cookiebot.consent && typeof Cookiebot.consent.marketing === 'boolean') return Cookiebot.consent.marketing;
        }
        // Fallback: CookieConsent-String (Cookiebot)
        const cc = document.cookie.split('; ').find((r) => r.startsWith('CookieConsent='));
        return cc ? decodeURIComponent(cc.split('=')[1]).includes('marketing:true') : false;
      } catch (e) {
        return false;
      }
    }

    /* ================= Erkennung Typeform ================= */
    // Typische Typeform-Quellen:
    // - iframes: https://form.typeform.com/to/...  oder https://typeform.com/to/...
    // - embed-scripts: https://embed.typeform.com/embed.js (u. a. popover/sidetab)
    function isTypeformIframe(node) {
      const src = node && node.tagName === 'IFRAME' ? node.src || '' : '';
      return /(^|\/\/)(form\.)?typeform\.com\/(to|forms)\//i.test(src);
    }
    function isTypeformScript(node) {
      const src = node && node.tagName === 'SCRIPT' ? node.src || '' : '';
      return /(^|\/\/)embed\.typeform\.com\/embed(\.js)?/i.test(src);
    }

    /* ================= Placeholder UI ================= */
    function makePlaceholder(src) {
      const wrap = document.createElement('div');
      wrap.className = 'typeform-consent-placeholder';
      wrap.setAttribute('data-typeform-src', src);
      wrap.innerHTML = `
      <div class="typeform-consent-box">
        <div class="typeform-consent-title">Formular blockiert</div>
        <div class="typeform-consent-text">Dieses Typeform wird erst nach Zustimmung zu Marketing-Cookies geladen.</div>
        <div class="typeform-consent-actions">
          <button type="button" class="typeform-consent-allow">Marketing akzeptieren & Formular laden</button>
          <button type="button" class="typeform-consent-settings">Einstellungen öffnen</button>
        </div>
      </div>
    `;
      const openDetails = () => {
        if (typeof Cookiebot !== 'undefined' && typeof Cookiebot.renew === 'function') {
          Cookiebot.renew(); // direkt Detail-/Änderungsansicht
        } else if (typeof Cookiebot !== 'undefined' && typeof Cookiebot.show === 'function') {
          Cookiebot.show();
        } else {
          alert('Bitte Marketing-Cookies in den Cookie-Einstellungen aktivieren.');
        }
      };
      wrap.querySelector('.typeform-consent-allow').addEventListener('click', openDetails);
      wrap.querySelector('.typeform-consent-settings').addEventListener('click', openDetails);
      return wrap;
    }

    /* ================= Größen-Snapshot ================= */
    function snapshotIframeMeta(ifr) {
      const rect = ifr.getBoundingClientRect();
      return {
        widthAttr: ifr.getAttribute('width') || '',
        heightAttr: ifr.getAttribute('height') || '',
        style: ifr.getAttribute('style') || '',
        className: ifr.className || '',
        allow:
          ifr.getAttribute('allow') || 'camera; microphone; geolocation; clipboard-read; clipboard-write; autoplay',
        allowFull: ifr.hasAttribute('allowfullscreen') ? '1' : '',
        cw: Math.round(rect.width) || '',
        ch: Math.round(rect.height) || '',
      };
    }

    /* ================= Iframe -> Placeholder ================= */
    function replaceIframeWithPlaceholder(iframe) {
      if (iframe.hasAttribute('data-consent-exempt')) return; // Opt-out für einzelne iframes
      const meta = snapshotIframeMeta(iframe);
      const src = iframe.src;

      const ph = makePlaceholder(src);
      Object.entries(meta).forEach(([k, v]) => (ph.dataset[k] = v));

      // dimensionieren
      if (meta.widthAttr && meta.heightAttr) {
        ph.style.aspectRatio = `${meta.widthAttr} / ${meta.heightAttr}`;
        ph.style.width = /^\d+$/.test(meta.widthAttr) ? meta.widthAttr + 'px' : meta.widthAttr;
      } else if (meta.cw && meta.ch) {
        ph.style.aspectRatio = `${meta.cw} / ${meta.ch}`;
        ph.style.width = meta.cw + 'px';
      } else {
        ph.style.width = '100%';
        ph.style.aspectRatio = '3 / 4'; // Typeform ist oft höher – gern anpassen
      }

      iframe.parentNode.insertBefore(ph, iframe);
      iframe.parentNode.removeChild(iframe);
    }

    /* ================= Placeholder -> Iframe ================= */
    function restoreTypeformFromPlaceholder(ph) {
      const src = ph.getAttribute('data-typeform-src');
      if (!src) return;

      const f = document.createElement('iframe');
      f.src = src;

      // Ursprungs-Styles/Klassen/Attribute übernehmen
      const cls = ph.dataset.className || '';
      if (cls) f.className = cls;

      const style = ph.dataset.style || '';
      if (style) f.setAttribute('style', style);

      const w = ph.dataset.widthAttr || ph.dataset.cw || '';
      const h = ph.dataset.heightAttr || ph.dataset.ch || '';
      if (w && h) {
        f.setAttribute('width', String(w));
        f.setAttribute('height', String(h));
      } else {
        f.style.width = '100%';
        f.style.height = '100%';
      }

      f.setAttribute('frameborder', '0');
      f.setAttribute(
        'allow',
        ph.dataset.allow || 'camera; microphone; geolocation; clipboard-read; clipboard-write; autoplay'
      );
      if (ph.dataset.allowFull) f.setAttribute('allowfullscreen', '');

      const wrap = document.createElement('div');
      wrap.className = 'typeform-consent-embed';
      wrap.style.width = ph.style.width || '100%';
      if (ph.style.aspectRatio) wrap.style.aspectRatio = ph.style.aspectRatio;

      wrap.appendChild(f);
      ph.parentNode.replaceChild(wrap, ph);
    }

    /* ================= Skripte (embed.js) blocken / rehydrieren ================= */
    function markBlockedScript(node) {
      node.setAttribute('data-tf-blocked', '1');
      node.setAttribute('data-tf-src', node.src || '');
      try {
        node.removeAttribute('src');
      } catch (e) {}
      node.type = 'text/plain';
      log('blocked Typeform script', node.getAttribute('data-tf-src'));
    }

    async function restoreBlockedScripts() {
      if (!hasMarketingConsent()) return;
      const blocked = Array.from(document.querySelectorAll('script[data-tf-blocked="1"]'));
      for (const s of blocked) {
        const src = s.getAttribute('data-tf-src');
        if (!src) continue;
        await new Promise((res, rej) => {
          const el = document.createElement('script');
          el.src = src;
          el.async = true;
          el.onload = res;
          el.onerror = rej;
          document.head.appendChild(el);
        });
      }
    }

    /* ================= Sammelfunktionen ================= */
    function blockAllTypeform(context) {
      const root = context || document;
      // iframes
      root.querySelectorAll('iframe').forEach((ifr) => {
        if (!hasMarketingConsent() && isTypeformIframe(ifr)) replaceIframeWithPlaceholder(ifr);
      });
      // scripts
      root.querySelectorAll('script[src]').forEach((sc) => {
        if (!hasMarketingConsent() && isTypeformScript(sc)) markBlockedScript(sc);
      });
    }

    function restoreAllPlaceholders() {
      if (!hasMarketingConsent()) return;
      document.querySelectorAll('.typeform-consent-placeholder').forEach(restoreTypeformFromPlaceholder);
      restoreBlockedScripts();
    }

    /* ================= Initial & Dynamik ================= */
    // Initial
    if (!hasMarketingConsent()) {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => blockAllTypeform(document));
      } else {
        blockAllTypeform(document);
      }
    }

    // Dynamisch nachgeladen
    new MutationObserver((ml) => {
      const consent = hasMarketingConsent();
      for (const m of ml)
        for (const n of m.addedNodes) {
          if (n && n.tagName === 'IFRAME' && isTypeformIframe(n)) {
            if (!consent) replaceIframeWithPlaceholder(n);
          } else if (n && n.tagName === 'SCRIPT' && isTypeformScript(n)) {
            if (!consent) markBlockedScript(n);
          } else if (n && n.querySelectorAll) {
            if (!consent) {
              n.querySelectorAll('iframe').forEach((ifr) => isTypeformIframe(ifr) && replaceIframeWithPlaceholder(ifr));
              n.querySelectorAll('script[src]').forEach((sc) => isTypeformScript(sc) && markBlockedScript(sc));
            }
          }
        }
    }).observe(document.documentElement, { childList: true, subtree: true });

    /* ================= State-Enforcer (Opt-in & Widerruf) ================= */
    function enforceTypeformConsentState() {
      if (hasMarketingConsent()) {
        restoreAllPlaceholders();
      } else {
        // bei Widerruf: laufende Einbettungen wieder blocken
        document
          .querySelectorAll('iframe')
          .forEach((ifr) => isTypeformIframe(ifr) && replaceIframeWithPlaceholder(ifr));
      }
    }
    window.addEventListener('CookiebotOnConsentReady', enforceTypeformConsentState);
    window.addEventListener('CookiebotOnAccept', enforceTypeformConsentState);
    window.addEventListener('CookiebotOnDecline', enforceTypeformConsentState);

    /* ========= Minimal-CSS (optional ins Theme-CSS) ================= */
    const css = `
    .typeform-consent-placeholder,
    .typeform-consent-embed{ display:block; max-width:100%; }
    .typeform-consent-embed{ position:relative; }
    .typeform-consent-embed iframe{ width:100%; height:100%; display:block; }

    .typeform-consent-placeholder{
      border:1px solid #e5e5e5; background:#fafafa;
      padding:16px; text-align:center; margin:8px 0; width:100%;
    }
    .typeform-consent-title{ font-weight:600; margin-bottom:4px; }
    .typeform-consent-text{ font-size:14px; color:#444; margin-bottom:10px; }
    .typeform-consent-actions button{
      margin:0 4px; padding:8px 12px; cursor:pointer; border-radius:6px;
    }
    .typeform-consent-actions .typeform-consent-allow{
      background:#222; color:#fff; border:0;
    }
    .typeform-consent-actions .typeform-consent-settings{
      background:#fff; color:#222; border:1px solid #222;
    }
  `;
    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);
  })();