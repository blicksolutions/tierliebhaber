(function(){
  'use strict';
  if (window.__TREKKIE_BLOCKER_LOADED__) return;
  window.__TREKKIE_BLOCKER_LOADED__ = true;

  var trekkieEnabled = false;
  var trekkieObserver = null;

  function hasCookiebot(){ 
    return !!(window.Cookiebot && window.Cookiebot.consent); 
  }
  
  function hasStatisticsConsent(){
    try{
      if (!hasCookiebot()) return false;
      return window.Cookiebot.consent.statistics === true;
    }catch(e){ 
      return false; 
    }
  }

  var __trekkieCalls = [];
  var trekkieStub = {
    identify: function() { __trekkieCalls.push(['identify', Array.prototype.slice.call(arguments)]); },
    page: function() { __trekkieCalls.push(['page', Array.prototype.slice.call(arguments)]); },
    track: function() { __trekkieCalls.push(['track', Array.prototype.slice.call(arguments)]); },
    ready: function(fn) { 
      if (typeof fn === 'function') {
        if (trekkieEnabled && window.Trekkie && window.Trekkie !== trekkieStub) {
          fn();
        } else {
          __trekkieCalls.push(['ready', [fn]]);
        }
      }
    },
    produce: function() { __trekkieCalls.push(['produce', Array.prototype.slice.call(arguments)]); }
  };

  window.Shopify = window.Shopify || {};
  window.Shopify.analytics = window.Shopify.analytics || {};
  
  if (!window.Trekkie) {
    try {
      Object.defineProperty(window, 'Trekkie', {
        get: function() { return trekkieStub; },
        set: function(val) { 
          if (trekkieEnabled) {
            Object.defineProperty(window, 'Trekkie', {
              value: val,
              writable: true,
              configurable: true
            });
          }
        },
        configurable: true
      });
    } catch(e) {}
  }
  
  if (!window.ShopifyAnalytics) {
    try {
      Object.defineProperty(window, 'ShopifyAnalytics', {
        get: function() { return { lib: trekkieStub, meta: {} }; },
        set: function(val) {
          if (trekkieEnabled) {
            Object.defineProperty(window, 'ShopifyAnalytics', {
              value: val,
              writable: true,
              configurable: true
            });
          }
        },
        configurable: true
      });
    } catch(e) {}
  }

  function isTrekkieScript(src) {
    if (!src) return false;
    try {
      var srcStr = src.toString ? src.toString() : String(src);
      return srcStr.includes('trekkie') || 
             srcStr.includes('shopify_stats') ||
             srcStr.includes('analytics.js');
    } catch(e) {
      return false;
    }
  }
  
  function isShopifyAnalytics(url) {
    if (!url) return false;
    try {
      var urlStr = url.toString ? url.toString() : String(url);
      return urlStr.includes('monorail-edge.shopifysvc.com') ||
             urlStr.includes('error-analytics-sessions-production.shopifysvc.com') ||
             urlStr.includes('production.shopifysvc.com') ||
             urlStr.includes('/monorail/') ||
             urlStr.includes('produce_batch') ||
             urlStr.includes('/observeonly');
    } catch(e) {
      return false;
    }
  }

  var originalAppendChild = Element.prototype.appendChild;
  if (!originalAppendChild.__trekkiePatched) {
    Element.prototype.appendChild = function(child) {
      var shouldBlock = false;
      
      try {
        if (child && child.tagName === 'SCRIPT') {
          var src = child.src || (child.getAttribute && child.getAttribute('src'));
          if (src && isTrekkieScript(src) && !hasStatisticsConsent()) {
            shouldBlock = true;
          }
        }
      } catch(e) {}
      
      if (shouldBlock) return child;
      return originalAppendChild.call(this, child);
    };
    Element.prototype.appendChild.__trekkiePatched = true;
  }

  var originalInsertBefore = Element.prototype.insertBefore;
  if (!originalInsertBefore.__trekkiePatched) {
    Element.prototype.insertBefore = function(child, reference) {
      var shouldBlock = false;
      
      try {
        if (child && child.tagName === 'SCRIPT') {
          var src = child.src || (child.getAttribute && child.getAttribute('src'));
          if (src && isTrekkieScript(src) && !hasStatisticsConsent()) {
            shouldBlock = true;
          }
        }
      } catch(e) {}
      
      if (shouldBlock) return child;
      return originalInsertBefore.call(this, child, reference);
    };
    Element.prototype.insertBefore.__trekkiePatched = true;
  }

  var _fetch = window.fetch;
  if (!_fetch.__trekkiePatched) {
    window.fetch = function(resource, options) {
      try {
        var url = typeof resource === 'string' ? resource : (resource && resource.url);
        
        if (isShopifyAnalytics(url) && !hasStatisticsConsent()) {
          return Promise.resolve(new Response('{"success":true}', {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          }));
        }
      } catch(e) {}
      
      return _fetch.apply(this, arguments);
    };
    window.fetch.__trekkiePatched = true;
  }

  var _beacon = navigator.sendBeacon;
  if (_beacon && !_beacon.__trekkiePatched) {
    navigator.sendBeacon = function(url, data) {
      try {
        if (isShopifyAnalytics(url) && !hasStatisticsConsent()) {
          return true;
        }
      } catch(e) {}
      
      return _beacon.call(this, url, data);
    };
    navigator.sendBeacon.__trekkiePatched = true;
  }

  var _xhrOpen = XMLHttpRequest.prototype.open;
  var _xhrSend = XMLHttpRequest.prototype.send;
  
  if (!XMLHttpRequest.prototype.__trekkiePatched) {
    XMLHttpRequest.prototype.open = function(method, url) {
      try {
        this.__shopifyBlocked = isShopifyAnalytics(url) && !hasStatisticsConsent();
        
        if (this.__shopifyBlocked) {
          this.readyState = 1;
          return;
        }
      } catch(e) {}
      
      return _xhrOpen.apply(this, arguments);
    };
    
    XMLHttpRequest.prototype.send = function(data) {
      if (this.__shopifyBlocked) {
        var self = this;
        setTimeout(function() {
          try {
            self.readyState = 4;
            self.status = 200;
            self.statusText = 'OK';
            self.responseText = '{"success":true}';
            if (self.onreadystatechange) self.onreadystatechange();
            if (self.onload) self.onload();
          } catch(e) {}
        }, 0);
        return;
      }
      
      return _xhrSend.apply(this, arguments);
    };
    
    XMLHttpRequest.prototype.__trekkiePatched = true;
  }

  trekkieObserver = new MutationObserver(function(mutations) {
    if (hasStatisticsConsent() || trekkieEnabled) return;
    
    mutations.forEach(function(mutation) {
      if (!mutation.addedNodes) return;
      mutation.addedNodes.forEach(function(node) {
        try {
          if (node.tagName === 'SCRIPT') {
            var src = node.src || (node.getAttribute && node.getAttribute('src'));
            if (src && isTrekkieScript(src)) {
              node.remove();
            }
          }
        } catch(e) {}
      });
    });
  });
  
  try {
    trekkieObserver.observe(document.documentElement, {
      childList: true,
      subtree: true
    });
  } catch(e) {}

  function replayTrekkieCalls() {
    if (!window.Trekkie || window.Trekkie === trekkieStub) return;
    
    __trekkieCalls.forEach(function(call) {
      try {
        if (typeof window.Trekkie[call[0]] === 'function') {
          window.Trekkie[call[0]].apply(window.Trekkie, call[1]);
        }
      } catch(e) {}
    });
    __trekkieCalls.length = 0;
  }

  function enableTrekkie() {
    if (trekkieEnabled) return;
    if (!hasStatisticsConsent()) return;
    
    trekkieEnabled = true;
    
    if (trekkieObserver) {
      try {
        trekkieObserver.disconnect();
      } catch(e) {}
      trekkieObserver = null;
    }
    
    try {
      var script = document.createElement('script');
      script.src = 'https://cdn.shopify.com/s/trekkie.storefront.min.js';
      script.async = true;
      script.onload = function() {
        setTimeout(replayTrekkieCalls, 100);
      };
      document.head.appendChild(script);
    } catch(e) {}
  }

  window.addEventListener('CookiebotOnAccept', enableTrekkie);
  window.addEventListener('CookiebotOnLoad', enableTrekkie);
  window.addEventListener('CookiebotOnConsentReady', enableTrekkie);
  
  if (hasStatisticsConsent()) {
    enableTrekkie();
  }
  
  document.addEventListener('DOMContentLoaded', function() {
    if (hasStatisticsConsent() && !trekkieEnabled) {
      enableTrekkie();
    }
  });
})();