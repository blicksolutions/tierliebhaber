<script>
  (function () {
    // ---- Toggle debug logs in console
    window.DEBUG_CONSENT = window.DEBUG_CONSENT || false;
    const log = (...args) => {
      if (window.DEBUG_CONSENT) {
        try {
          console.log('[consent]', ...args);
        } catch (e) {}
      }
    };

    // ---- Consent check (Cookiebot first, cookie fallback second)
    function hasConsent(cat) {
      try {
        if (window.Cookiebot && Cookiebot.consent) {
          if (cat === 'marketing') return !!Cookiebot.consent.marketing;
          if (cat === 'statistics') return !!Cookiebot.consent.statistics;
          if (cat === 'preferences') return !!Cookiebot.consent.preferences;
          if (cat === 'necessary') return true;
          return false;
        }
        // Fallback: parse "CookieConsent" cookie (Cookiebot writes this)
        const row = document.cookie.split('; ').find((r) => r.startsWith('CookieConsent='));
        if (!row) return false;
        const v = decodeURIComponent(row.split('=')[1] || '');
        const map = {
          marketing: /marketing:true/.test(v),
          statistics: /statistics:true/.test(v),
          preferences: /preferences:true/.test(v),
        };
        return !!map[cat];
      } catch (e) {
        return false;
      }
    }

    // ---- Guard marketing cookies (Elevar/Klaviyo) until consent
    const cookieDesc =
      Object.getOwnPropertyDescriptor(Document.prototype, 'cookie') ||
      Object.getOwnPropertyDescriptor(HTMLDocument.prototype, 'cookie');
    if (cookieDesc && cookieDesc.set) {
      Object.defineProperty(document, 'cookie', {
        configurable: true,
        enumerable: true,
        get: cookieDesc.get,
        set: function (v) {
          try {
            // Add any other marketing cookies you want to guard here:
            if (v && (/_Elevar/i.test(v) || /__kla_id/i.test(v) || /_ke=/.test(v) || /KL_FORMS/.test(v))) {
              if (!hasConsent('marketing')) {
                log('blocked cookie (marketing)', v);
                return;
              }
            }
          } catch (e) {}
          return cookieDesc.set.call(this, v);
        },
      });
    }

    // ---- Domain → category map for script gating
    const MAP = {
      'polyfill-fastly.net': 'preferences', // Functional
      'error-analytics-sessions-production.shopifysvc.com': 'statistics', // Shopify Error Analytics
    };
    const domains = Object.keys(MAP);

    const hostOf = (u) => {
      try {
        return new URL(u, location.href).hostname;
      } catch (e) {
        return '';
      }
    };
    const catFor = (u) => {
      const h = hostOf(u);
      if (!h) return null;
      for (const d of domains) {
        if (h === d || h.endsWith('.' + d)) return MAP[d];
      }
      return null;
    };
    const shouldBlock = (u) => {
      const c = catFor(u || '');
      return c ? !hasConsent(c) : false;
    };

    const pending = [];
    function copyAttrs(el) {
      const o = {};
      for (const a of el.attributes || []) o[a.name] = a.value;
      return o;
    }
    function queue(el, src) {
      pending.push({
        src,
        attrs: copyAttrs(el),
        async: el.async,
        defer: el.defer,
        nonce: el.nonce,
        referrerPolicy: el.referrerPolicy,
        crossOrigin: el.crossOrigin,
        integrity: el.integrity,
      });
      log('blocked script', src, 'cat:', catFor(src));
    }
    function release() {
      for (let i = pending.length - 1; i >= 0; i--) {
        const r = pending[i],
          c = catFor(r.src || '');
        if (!c || hasConsent(c)) {
          const s = document.createElement('script');
          if (r.nonce) s.nonce = r.nonce;
          if (r.async != null) s.async = r.async;
          if (r.defer != null) s.defer = r.defer;
          if (r.referrerPolicy) s.referrerPolicy = r.referrerPolicy;
          if (r.crossOrigin) s.crossOrigin = r.crossOrigin;
          if (r.integrity) s.integrity = r.integrity;
          for (const [k, v] of Object.entries(r.attrs || {})) {
            const kk = k.toLowerCase();
            if (
              !['src', 'async', 'defer', 'nonce', 'referrerpolicy', 'crossorigin', 'integrity', 'type'].includes(kk)
            ) {
              try {
                s.setAttribute(k, v);
              } catch (e) {}
            }
          }
          s.src = r.src;
          (document.head || document.documentElement).appendChild(s);
          log('released script', r.src, c);
          pending.splice(i, 1);
        }
      }
    }

    // Intercept dynamic script loads (createElement, appendChild/insertBefore, and .src setter)
    const OrigCreate = document.createElement;
    const OrigAppend = Element.prototype.appendChild;
    const OrigBefore = Element.prototype.insertBefore;
    const OrigSetAttr = Element.prototype.setAttribute;

    document.createElement = function (tag) {
      const el = OrigCreate.call(document, tag);
      if (String(tag).toLowerCase() === 'script') {
        el.setAttribute = function (name, value) {
          if (String(name).toLowerCase() === 'src' && shouldBlock(value)) {
            queue(el, value);
            return;
          }
          return OrigSetAttr.call(el, name, value);
        };
      }
      return el;
    };
    Element.prototype.appendChild = function (ch) {
      if (ch && ch.tagName === 'SCRIPT') {
        const src = ch.getAttribute && ch.getAttribute('src');
        if (src && shouldBlock(src)) {
          queue(ch, src);
          return ch;
        }
      }
      return OrigAppend.call(this, ch);
    };
    Element.prototype.insertBefore = function (n, r) {
      if (n && n.tagName === 'SCRIPT') {
        const src = n.getAttribute && n.getAttribute('src');
        if (src && shouldBlock(src)) {
          queue(n, src);
          return n;
        }
      }
      return OrigBefore.call(this, n, r);
    };

    const srcDesc = Object.getOwnPropertyDescriptor(HTMLScriptElement.prototype, 'src');
    if (srcDesc && srcDesc.set) {
      Object.defineProperty(HTMLScriptElement.prototype, 'src', {
        configurable: true,
        get() {
          return srcDesc.get.call(this);
        },
        set(v) {
          if (shouldBlock(v)) {
            queue(this, v);
            return v;
          }
          return srcDesc.set.call(this, v);
        },
      });
    }

    // Release when Cookiebot reports consent (or fallback timer)
    window.addEventListener('CookiebotOnConsentReady', release);
    window.addEventListener('CookiebotOnAccept', release);
    window.addEventListener('CookiebotOnDecline', release);
    setTimeout(release, 2000);
  })();
</script>

<script
  id="Cookiebot"
  src="https://consent.cookiebot.com/uc.js"
  data-cbid="a4aa9c1a-9639-4e9f-8a23-4aef9c37b3cc"
  data-blockingmode="manual"
  type="text/javascript"
></script>

<!--  Block Vimeo until Markting Consent (edit Michael Müller 9.9.25) --> 

<script>
(function(){
  /* ---------- Helpers ---------- */
  const log = (...a)=>{ try{ console.debug('[VIMEO CONSENT]',...a);}catch(e){} };

  function hasMarketingConsent(){
    try {
      if (typeof Cookiebot !== 'undefined') {
        if (Cookiebot.consents && typeof Cookiebot.consents.marketing === 'boolean') return Cookiebot.consents.marketing;
        if (Cookiebot.consent  && typeof Cookiebot.consent.marketing  === 'boolean') return Cookiebot.consent.marketing;
      }
      // Fallback: CookieConsent-String von Cookiebot
      const cc = document.cookie.split('; ').find(r=>r.startsWith('CookieConsent='));
      return cc ? decodeURIComponent(cc.split('=')[1]).includes('marketing:true') : false;
    } catch(e){ return false; }
  }

  function isVimeoIframe(node){
    return node && node.tagName === 'IFRAME' && /(^|\/\/)(player\.)?vimeo\.com/i.test(node.src || '');
  }

  function makePlaceholder(src){
    const wrap = document.createElement('div');
    wrap.className = 'vimeo-consent-placeholder';
    wrap.setAttribute('data-vimeo-src', src);
    wrap.innerHTML = `
      <div class="vimeo-consent-box">
        <div class="vimeo-consent-title">Vimeo-Video blockiert</div>
        <div class="vimeo-consent-text">Zum Abspielen bitte Marketing-Cookies zulassen.</div>
        <div class="vimeo-consent-actions">
          <button type="button" class="vimeo-consent-allow">Marketing akzeptieren & Video laden</button>
          <button type="button" class="vimeo-consent-settings">Einstellungen öffnen</button>
        </div>
      </div>
    `;
    wrap.querySelector('.vimeo-consent-allow').addEventListener('click', function(){
      // Im manuellen Modus öffnen wir einfach das Cookiebot-Dialogfenster;
      // der User kann dort Marketing aktivieren. Danach greifen die Events unten.
      if (typeof Cookiebot !== 'undefined' && typeof Cookiebot.show === 'function') {
        Cookiebot.renew();
      } else {
        alert('Bitte Marketing-Cookies in den Cookie-Einstellungen aktivieren.');
      }
    });
    wrap.querySelector('.vimeo-consent-settings').addEventListener('click', function(){
      if (typeof Cookiebot !== 'undefined' && typeof Cookiebot.show === 'function') Cookiebot.renew();
    });
    return wrap;
  }

  function replaceIframeWithPlaceholder(iframe){
    if (iframe.hasAttribute('data-consent-exempt')) return; // Opt-out für einzelne iFrames
    const src = iframe.src;
    const ph = makePlaceholder(src);
    iframe.parentNode.insertBefore(ph, iframe);
    iframe.parentNode.removeChild(iframe);
  }

  function restoreVimeoFromPlaceholder(ph){
    const src = ph.getAttribute('data-vimeo-src');
    if (!src) return;
    const f = document.createElement('iframe');
    f.src = src;
    f.width = ph.getAttribute('data-width') || '100%';
    f.height = ph.getAttribute('data-height') || '100%';
    f.setAttribute('frameborder','0');
    f.setAttribute('allow','autoplay; fullscreen; picture-in-picture');
    f.setAttribute('allowfullscreen','');
    ph.parentNode.replaceChild(f, ph);
  }

  function blockAllVimeoIframes(context){
    const root = context || document;
    root.querySelectorAll('iframe[src*="vimeo.com"]').forEach(ifr=>{
      if (!hasMarketingConsent()) replaceIframeWithPlaceholder(ifr);
    });
  }

  function restoreAllPlaceholders(){
    if (!hasMarketingConsent()) return;
    document.querySelectorAll('.vimeo-consent-placeholder').forEach(restoreVimeoFromPlaceholder);
  }

  // Initial: bestehende iFrames prüfen
  if (!hasMarketingConsent()) {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', ()=> blockAllVimeoIframes(document));
    } else {
      blockAllVimeoIframes(document);
    }
  }

  // Dynamisch nachgeladene iFrames abfangen
  new MutationObserver((ml)=>{
    if (hasMarketingConsent()) return;
    for (const m of ml) for (const n of m.addedNodes) {
      if (isVimeoIframe(n)) replaceIframeWithPlaceholder(n);
      else if (n.querySelectorAll) n.querySelectorAll('iframe[src*="vimeo.com"]').forEach(replaceIframeWithPlaceholder);
    }
  }).observe(document.documentElement, { childList:true, subtree:true });

  // Nach Einwilligung: automatisch freischalten
  window.addEventListener('CookiebotOnConsentReady', restoreAllPlaceholders);
  window.addEventListener('CookiebotOnAccept',      restoreAllPlaceholders);

  // Minimalstyles (kannst du ins CSS auslagern)
  const css = `
  .vimeo-consent-placeholder{border:1px solid #e5e5e5; background:#fafafa; padding:16px; text-align:center; margin:8px 0;}
  .vimeo-consent-title{font-weight:600; margin-bottom:4px;}
  .vimeo-consent-text{font-size:14px; color:#444; margin-bottom:10px;}
  .vimeo-consent-actions button{margin:0 4px; padding:8px 12px; cursor:pointer;}
  .vimeo-consent-actions .vimeo-consent-allow{background:#222; color:#fff; border:0;}
  .vimeo-consent-actions .vimeo-consent-settings{background:#fff; color:#222; border:1px solid #222;}
  `;
  const style = document.createElement('style');
  style.textContent = css;
  document.head.appendChild(style);
})();
</script>



<!--  Block Typeform until Markting Consent (edit Michael Müller 9.9.25) --> 

<script>
(function(){
  /* ---------- Helpers ---------- */
  const log = (...a)=>{ try{ console.debug('[TYPEFORM CONSENT]',...a);}catch(e){} };

  function hasMarketingConsent(){
    try {
      if (typeof Cookiebot !== 'undefined') {
        if (Cookiebot.consents && typeof Cookiebot.consents.marketing === 'boolean') return Cookiebot.consents.marketing;
        if (Cookiebot.consent  && typeof Cookiebot.consent.marketing  === 'boolean') return Cookiebot.consent.marketing;
      }
      const cc = document.cookie.split('; ').find(r=>r.startsWith('CookieConsent='));
      return cc ? decodeURIComponent(cc.split('=')[1]).includes('marketing:true') : false;
    } catch(e){ return false; }
  }

  /* ---------- Erkennung ---------- */
  const TYPEFORM_HOST_RX = /(^|\/\/)([^/]*\.)?(typeform\.com|typeform\.co)\//i; // z.B. embed.typeform.com, admin.typeform.com, s1.typeform.co

  function isTypeformIframe(node){
    return node && node.tagName === 'IFRAME' && TYPEFORM_HOST_RX.test(node.src || '');
  }
  function isTypeformScript(node){
    return node && node.tagName === 'SCRIPT' && node.src && TYPEFORM_HOST_RX.test(node.src);
  }

  /* ---------- Platzhalter-UI ---------- */
  function makePlaceholder(src){
    const wrap = document.createElement('div');
    wrap.className = 'typeform-consent-placeholder';
    wrap.setAttribute('data-tf-src', src || '');
    wrap.innerHTML = `
      <div class="typeform-consent-box">
        <div class="typeform-consent-title">Typeform-Inhalt blockiert</div>
        <div class="typeform-consent-text">Zum Anzeigen bitte Marketing-Cookies zulassen.</div>
        <div class="typeform-consent-actions">
          <button type="button" class="typeform-consent-allow">Marketing akzeptieren & Inhalt laden</button>
          <button type="button" class="typeform-consent-settings">Einstellungen öffnen</button>
        </div>
      </div>
    `;
    // Direkt die Detail-/Präferenzansicht öffnen:
    const openDetails = () => {
      if (typeof Cookiebot !== 'undefined' && typeof Cookiebot.renew === 'function') Cookiebot.renew();
      else if (typeof Cookiebot !== 'undefined' && typeof Cookiebot.show === 'function') Cookiebot.show();
      else alert('Bitte in den Cookie-Einstellungen Marketing erlauben.');
    };
    wrap.querySelector('.typeform-consent-allow').addEventListener('click', openDetails);
    wrap.querySelector('.typeform-consent-settings').addEventListener('click', openDetails);
    return wrap;
  }

  /* ---------- Größen-/Meta-Snapshot ---------- */
  function snapshotBoxMeta(el){
    const rect = el.getBoundingClientRect();
    return {
      widthAttr:  el.getAttribute('width')  || '',
      heightAttr: el.getAttribute('height') || '',
      style:      el.getAttribute('style')  || '',
      className:  el.className || '',
      cw: Math.round(rect.width)  || '',
      ch: Math.round(rect.height) || ''
    };
  }

  /* ---------- iFrame -> Platzhalter ---------- */
  function replaceIframeWithPlaceholder(iframe){
    if (iframe.hasAttribute('data-consent-exempt')) return;
    const meta = snapshotBoxMeta(iframe);
    const src  = iframe.src;
    const ph   = makePlaceholder(src);

    Object.entries(meta).forEach(([k,v]) => ph.dataset[k] = v);

    // Dimensionen übernehmen / fallback 16:9
    if (meta.widthAttr && meta.heightAttr) {
      ph.style.aspectRatio = `${meta.widthAttr} / ${meta.heightAttr}`;
      ph.style.width = /^\d+$/.test(meta.widthAttr) ? meta.widthAttr+'px' : meta.widthAttr;
    } else if (meta.cw && meta.ch) {
      ph.style.aspectRatio = `${meta.cw} / ${meta.ch}`;
      ph.style.width = meta.cw + 'px';
    } else {
      ph.style.width = '100%';
      ph.style.aspectRatio = '16 / 9';
    }

    iframe.parentNode.insertBefore(ph, iframe);
    iframe.parentNode.removeChild(iframe);
  }

  /* ---------- Platzhalter -> iFrame ---------- */
  function restoreIframeFromPlaceholder(ph){
    const src = ph.getAttribute('data-tf-src');
    if (!src) return;

    const f = document.createElement('iframe');
    f.src = src;

    const cls = ph.dataset.className || '';
    if (cls) f.className = cls;

    const style = ph.dataset.style || '';
    if (style) f.setAttribute('style', style);

    const w = ph.dataset.widthAttr || ph.dataset.cw || '';
    const h = ph.dataset.heightAttr || ph.dataset.ch || '';
    if (w && h) {
      f.setAttribute('width', String(w));
      f.setAttribute('height', String(h));
    } else {
      f.style.width = '100%';
      f.style.height = '100%';
    }

    f.setAttribute('frameborder','0');
    f.setAttribute('allow', 'microphone; camera; autoplay; encrypted-media'); // Typeform nutzt ggf. Mic/Camera
    f.setAttribute('allowfullscreen','');

    const wrap = document.createElement('div');
    wrap.className = 'typeform-consent-embed';
    wrap.style.width = ph.style.width || '100%';
    if (ph.style.aspectRatio) wrap.style.aspectRatio = ph.style.aspectRatio;

    wrap.appendChild(f);
    ph.parentNode.replaceChild(wrap, ph);
  }

  /* ---------- Skripte blocken & nach Consent laden ---------- */
  function markScriptBlocked(node){
    node.setAttribute('data-tf-blocked','1');
    node.setAttribute('data-tf-src', node.src || '');
    try { node.removeAttribute('src'); } catch(e){}
    node.type = 'text/plain';
    log('blocked Typeform script', node.getAttribute('data-tf-src'));
  }

  async function reloadBlockedScripts(){
    const blocked = Array.from(document.querySelectorAll('script[data-tf-blocked="1"]'));
    for (const s of blocked) {
      const src = s.getAttribute('data-tf-src');
      if (!src) continue;
      await new Promise((res, rej)=>{
        const el = document.createElement('script');
        el.src = src;
        el.async = true;
        el.onload = res; el.onerror = rej;
        document.head.appendChild(el);
      });
    }
  }

  function blockAllTypeformIframes(ctx){
    (ctx||document).querySelectorAll('iframe').forEach(ifr=>{
      if (isTypeformIframe(ifr) && !hasMarketingConsent()) replaceIframeWithPlaceholder(ifr);
    });
  }

  /* ---------- Initiallauf ---------- */
  if (!hasMarketingConsent()) {
    // Bereits vorhandene iFrames blocken
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', ()=> blockAllTypeformIframes(document));
    } else {
      blockAllTypeformIframes(document);
    }
  }

  /* ---------- Dynamik: neue iFrames / Skripte abfangen ---------- */
  // Hook für appendChild/insertBefore: Skripte blockieren, iFrames ersetzen
  const hook = (proto, method) => {
    const orig = proto[method];
    proto[method] = function () {
      const node = arguments[0];
      if (!hasMarketingConsent() && node && node.tagName) {
        if (isTypeformScript(node)) { markScriptBlocked(node); try { return orig.apply(this, arguments); } catch(e){ return node; } }
        if (isTypeformIframe(node)) { replaceIframeWithPlaceholder(node); try { return orig.apply(this, arguments); } catch(e){ return node; } }
      }
      return orig.apply(this, arguments);
    };
  };
  hook(Element.prototype, 'appendChild');
  hook(Node.prototype, 'insertBefore');

  // MutationObserver als zusätzliche Sicherung
  new MutationObserver((ml)=>{
    if (hasMarketingConsent()) return;
    for (const m of ml) for (const n of m.addedNodes) {
      if (!(n && n.tagName)) continue;
      if (isTypeformScript(n)) markScriptBlocked(n);
      else if (isTypeformIframe(n)) replaceIframeWithPlaceholder(n);
      else if (n.querySelectorAll){
        n.querySelectorAll('script').forEach(s=>{ if (isTypeformScript(s)) markScriptBlocked(s); });
        n.querySelectorAll('iframe').forEach(i=>{ if (isTypeformIframe(i)) replaceIframeWithPlaceholder(i); });
      }
    }
  }).observe(document.documentElement, { childList:true, subtree:true });

  /* ---------- Nach Einwilligung freigeben ---------- */
  async function restoreAllTypeform(){
    if (!hasMarketingConsent()) return;
    // 1) blockierte Skripte nachladen (z. B. embed.typeform.com/next/embed.js)
    await reloadBlockedScripts();
    // 2) Platzhalter wieder durch iFrames ersetzen (falls es direkte iFrame-Embeds sind)
    document.querySelectorAll('.typeform-consent-placeholder').forEach(restoreIframeFromPlaceholder);
    log('Typeform restored after consent');
  }
  window.addEventListener('CookiebotOnConsentReady', restoreAllTypeform);
  window.addEventListener('CookiebotOnAccept',      restoreAllTypeform);

  /* ---------- Minimal-CSS ---------- */
  const css = `
    .typeform-consent-placeholder,
    .typeform-consent-embed{ display:block; max-width:100%; }
    .typeform-consent-embed{ position:relative; }
    .typeform-consent-embed iframe{ width:100%; height:100%; display:block; }

    .typeform-consent-placeholder{
      border:1px solid #e5e5e5; background:#fafafa;
      padding:16px; text-align:center; margin:8px 0; width:100%;
    }
    .typeform-consent-title{ font-weight:600; margin-bottom:4px; }
    .typeform-consent-text{ font-size:14px; color:#444; margin-bottom:10px; }
    .typeform-consent-actions button{
      margin:0 4px; padding:8px 12px; cursor:pointer; border-radius:6px;
    }
    .typeform-consent-actions .typeform-consent-allow{ background:#222; color:#fff; border:0; }
    .typeform-consent-actions .typeform-consent-settings{ background:#fff; color:#222; border:1px solid #222; }
  `;
  const style = document.createElement('style'); style.textContent = css; document.head.appendChild(style);
})();
</script>


