<script
  id="Cookiebot"
  src="https://consent.cookiebot.com/uc.js"
  data-cbid="a4aa9c1a-9639-4e9f-8a23-4aef9c37b3cc"
  data-blockingmode="manual"
  type="text/javascript"
></script>

{% comment %} ================= Block all GDPR Compliance relevant Shopify Analytics Scripts without Marketing Consent === M.M. 15/10/25 ============== {% endcomment %}
<script>
  {% render 'shopify-analytics-consent-gate' %}
</script>

{% comment %} ================= Move Cookiebot-CMP Button "Alle ablehnen into Content Area on mobile template === M.M. 15/10/25 ============== {% endcomment %}
<script src="{{ 'mcb.js' | asset_url }}" async></script>

{% comment %} ================= Block google.api - google fonts without Marketing Consent === M.M. 15/10/25 ============== {% endcomment %}
<script src="{{ 'google-fonts-consent-gate.js' | asset_url }}" async></script>

{% comment %} ================= Block RevenueHunt Services (Product-Quiz!!) without Marketing Consen + remove Homepage Section === M.M. 15/10/25 ============== {% endcomment %}
<script>
  {% render 'revenuehunt-consent-gate' %}
</script>

{% comment %} ================= Block Loyalty Lions Services (TreueherzenClub!!) without Marketing Consent + remove Homepage Section === M.M. 15/10/25 ==============  {% endcomment %}
<script>
  {% render 'loyaltyLion-consent-gate' %}
</script>

{% comment %} ================= Block Loyalty Lions Services (TreueherzenClub!!) without Marketing Consent + remove Homepage Section === M.M. 15/10/25 ==============  {% endcomment %}
<script>{% render 'reviewsIo-consent-gate' %}</script>

{% comment %} ================= Block Replo Analytics without Marketing Consent === M.M. 15/10/25 ==============  {% endcomment %}
<script>{% render 'replo-consent_gate' %}</script>

<script>
  (function () {
    // ---- Toggle debug logs in console
    window.DEBUG_CONSENT = window.DEBUG_CONSENT || false;
    const log = (...args) => {
      if (window.DEBUG_CONSENT) {
        try {
          console.log('[consent]', ...args);
        } catch (e) {}
      }
    };

    // ---- Consent check (Cookiebot first, cookie fallback second)
    function hasConsent(cat) {
      try {
        if (window.Cookiebot && Cookiebot.consent) {
          if (cat === 'marketing') return !!Cookiebot.consent.marketing;
          if (cat === 'statistics') return !!Cookiebot.consent.statistics;
          if (cat === 'preferences') return !!Cookiebot.consent.preferences;
          if (cat === 'necessary') return true;
          return false;
        }
        // Fallback: parse "CookieConsent" cookie (Cookiebot writes this)
        const row = document.cookie.split('; ').find((r) => r.startsWith('CookieConsent='));
        if (!row) return false;
        const v = decodeURIComponent(row.split('=')[1] || '');
        const map = {
          marketing: /marketing:true/.test(v),
          statistics: /statistics:true/.test(v),
          preferences: /preferences:true/.test(v),
        };
        return !!map[cat];
      } catch (e) {
        return false;
      }
    }

    // ---- Guard marketing cookies (Elevar/Klaviyo) until consent
    const cookieDesc =
      Object.getOwnPropertyDescriptor(Document.prototype, 'cookie') ||
      Object.getOwnPropertyDescriptor(HTMLDocument.prototype, 'cookie');
    if (cookieDesc && cookieDesc.set) {
      Object.defineProperty(document, 'cookie', {
        configurable: true,
        enumerable: true,
        get: cookieDesc.get,
        set: function (v) {
          try {
            // Add any other marketing cookies you want to guard here:
            if (v && (/_Elevar/i.test(v) || /__kla_id/i.test(v) || /_ke=/.test(v) || /KL_FORMS/.test(v))) {
              if (!hasConsent('marketing')) {
                log('blocked cookie (marketing)', v);
                return;
              }
            }
          } catch (e) {}
          return cookieDesc.set.call(this, v);
        },
      });
    }

    // ---- Domain → category map for script gating
    const MAP = {
      'polyfill-fastly.net': 'preferences', // Functional
      'error-analytics-sessions-production.shopifysvc.com': 'statistics', // Shopify Error Analytics
    };
    const domains = Object.keys(MAP);

    const hostOf = (u) => {
      try {
        return new URL(u, location.href).hostname;
      } catch (e) {
        return '';
      }
    };
    const catFor = (u) => {
      const h = hostOf(u);
      if (!h) return null;
      for (const d of domains) {
        if (h === d || h.endsWith('.' + d)) return MAP[d];
      }
      return null;
    };
    const shouldBlock = (u) => {
      const c = catFor(u || '');
      return c ? !hasConsent(c) : false;
    };

    const pending = [];
    function copyAttrs(el) {
      const o = {};
      for (const a of el.attributes || []) o[a.name] = a.value;
      return o;
    }
    function queue(el, src) {
      pending.push({
        src,
        attrs: copyAttrs(el),
        async: el.async,
        defer: el.defer,
        nonce: el.nonce,
        referrerPolicy: el.referrerPolicy,
        crossOrigin: el.crossOrigin,
        integrity: el.integrity,
      });
      log('blocked script', src, 'cat:', catFor(src));
    }
    function release() {
      for (let i = pending.length - 1; i >= 0; i--) {
        const r = pending[i],
          c = catFor(r.src || '');
        if (!c || hasConsent(c)) {
          const s = document.createElement('script');
          if (r.nonce) s.nonce = r.nonce;
          if (r.async != null) s.async = r.async;
          if (r.defer != null) s.defer = r.defer;
          if (r.referrerPolicy) s.referrerPolicy = r.referrerPolicy;
          if (r.crossOrigin) s.crossOrigin = r.crossOrigin;
          if (r.integrity) s.integrity = r.integrity;
          for (const [k, v] of Object.entries(r.attrs || {})) {
            const kk = k.toLowerCase();
            if (
              !['src', 'async', 'defer', 'nonce', 'referrerpolicy', 'crossorigin', 'integrity', 'type'].includes(kk)
            ) {
              try {
                s.setAttribute(k, v);
              } catch (e) {}
            }
          }
          s.src = r.src;
          (document.head || document.documentElement).appendChild(s);
          log('released script', r.src, c);
          pending.splice(i, 1);
        }
      }
    }

    // Intercept dynamic script loads (createElement, appendChild/insertBefore, and .src setter)
    const OrigCreate = document.createElement;
    const OrigAppend = Element.prototype.appendChild;
    const OrigBefore = Element.prototype.insertBefore;
    const OrigSetAttr = Element.prototype.setAttribute;

    document.createElement = function (tag) {
      const el = OrigCreate.call(document, tag);
      if (String(tag).toLowerCase() === 'script') {
        el.setAttribute = function (name, value) {
          if (String(name).toLowerCase() === 'src' && shouldBlock(value)) {
            queue(el, value);
            return;
          }
          return OrigSetAttr.call(el, name, value);
        };
      }
      return el;
    };
    Element.prototype.appendChild = function (ch) {
      if (ch && ch.tagName === 'SCRIPT') {
        const src = ch.getAttribute && ch.getAttribute('src');
        if (src && shouldBlock(src)) {
          queue(ch, src);
          return ch;
        }
      }
      return OrigAppend.call(this, ch);
    };
    Element.prototype.insertBefore = function (n, r) {
      if (n && n.tagName === 'SCRIPT') {
        const src = n.getAttribute && n.getAttribute('src');
        if (src && shouldBlock(src)) {
          queue(n, src);
          return n;
        }
      }
      return OrigBefore.call(this, n, r);
    };

    const srcDesc = Object.getOwnPropertyDescriptor(HTMLScriptElement.prototype, 'src');
    if (srcDesc && srcDesc.set) {
      Object.defineProperty(HTMLScriptElement.prototype, 'src', {
        configurable: true,
        get() {
          return srcDesc.get.call(this);
        },
        set(v) {
          if (shouldBlock(v)) {
            queue(this, v);
            return v;
          }
          return srcDesc.set.call(this, v);
        },
      });
    }

    // Release when Cookiebot reports consent (or fallback timer)
    window.addEventListener('CookiebotOnConsentReady', release);
    window.addEventListener('CookiebotOnAccept', release);
    window.addEventListener('CookiebotOnDecline', release);
    setTimeout(release, 2000);
  })();
</script>

<!-- Block Vimeo Start until Markting Consent (edit Michael Müller 9.9.25) -->

{% comment %} ================= Block vimeo without Marketing Consent === M.M. 15/10/25 ==============  {% endcomment %}
{% render 'vimeo-consent_gate' %}

<!-- Block Typeform Start until Markting Consent (edit Michael Müller 9.9.25) -->

<script>
  (function () {
    /* ================= Helpers / Consent ================= */
    const log = (...a) => {
      try {
        console.debug('[TYPEFORM CONSENT]', ...a);
      } catch (e) {}
    };

    function hasMarketingConsent() {
      try {
        if (typeof Cookiebot !== 'undefined') {
          if (Cookiebot.consents && typeof Cookiebot.consents.marketing === 'boolean')
            return Cookiebot.consents.marketing;
          if (Cookiebot.consent && typeof Cookiebot.consent.marketing === 'boolean') return Cookiebot.consent.marketing;
        }
        // Fallback: CookieConsent-String (Cookiebot)
        const cc = document.cookie.split('; ').find((r) => r.startsWith('CookieConsent='));
        return cc ? decodeURIComponent(cc.split('=')[1]).includes('marketing:true') : false;
      } catch (e) {
        return false;
      }
    }

    /* ================= Erkennung Typeform ================= */
    // Typische Typeform-Quellen:
    // - iframes: https://form.typeform.com/to/...  oder https://typeform.com/to/...
    // - embed-scripts: https://embed.typeform.com/embed.js (u. a. popover/sidetab)
    function isTypeformIframe(node) {
      const src = node && node.tagName === 'IFRAME' ? node.src || '' : '';
      return /(^|\/\/)(form\.)?typeform\.com\/(to|forms)\//i.test(src);
    }
    function isTypeformScript(node) {
      const src = node && node.tagName === 'SCRIPT' ? node.src || '' : '';
      return /(^|\/\/)embed\.typeform\.com\/embed(\.js)?/i.test(src);
    }

    /* ================= Placeholder UI ================= */
    function makePlaceholder(src) {
      const wrap = document.createElement('div');
      wrap.className = 'typeform-consent-placeholder';
      wrap.setAttribute('data-typeform-src', src);
      wrap.innerHTML = `
      <div class="typeform-consent-box">
        <div class="typeform-consent-title">Formular blockiert</div>
        <div class="typeform-consent-text">Dieses Typeform wird erst nach Zustimmung zu Marketing-Cookies geladen.</div>
        <div class="typeform-consent-actions">
          <button type="button" class="typeform-consent-allow">Marketing akzeptieren & Formular laden</button>
          <button type="button" class="typeform-consent-settings">Einstellungen öffnen</button>
        </div>
      </div>
    `;
      const openDetails = () => {
        if (typeof Cookiebot !== 'undefined' && typeof Cookiebot.renew === 'function') {
          Cookiebot.renew(); // direkt Detail-/Änderungsansicht
        } else if (typeof Cookiebot !== 'undefined' && typeof Cookiebot.show === 'function') {
          Cookiebot.show();
        } else {
          alert('Bitte Marketing-Cookies in den Cookie-Einstellungen aktivieren.');
        }
      };
      wrap.querySelector('.typeform-consent-allow').addEventListener('click', openDetails);
      wrap.querySelector('.typeform-consent-settings').addEventListener('click', openDetails);
      return wrap;
    }

    /* ================= Größen-Snapshot ================= */
    function snapshotIframeMeta(ifr) {
      const rect = ifr.getBoundingClientRect();
      return {
        widthAttr: ifr.getAttribute('width') || '',
        heightAttr: ifr.getAttribute('height') || '',
        style: ifr.getAttribute('style') || '',
        className: ifr.className || '',
        allow:
          ifr.getAttribute('allow') || 'camera; microphone; geolocation; clipboard-read; clipboard-write; autoplay',
        allowFull: ifr.hasAttribute('allowfullscreen') ? '1' : '',
        cw: Math.round(rect.width) || '',
        ch: Math.round(rect.height) || '',
      };
    }

    /* ================= Iframe -> Placeholder ================= */
    function replaceIframeWithPlaceholder(iframe) {
      if (iframe.hasAttribute('data-consent-exempt')) return; // Opt-out für einzelne iframes
      const meta = snapshotIframeMeta(iframe);
      const src = iframe.src;

      const ph = makePlaceholder(src);
      Object.entries(meta).forEach(([k, v]) => (ph.dataset[k] = v));

      // dimensionieren
      if (meta.widthAttr && meta.heightAttr) {
        ph.style.aspectRatio = `${meta.widthAttr} / ${meta.heightAttr}`;
        ph.style.width = /^\d+$/.test(meta.widthAttr) ? meta.widthAttr + 'px' : meta.widthAttr;
      } else if (meta.cw && meta.ch) {
        ph.style.aspectRatio = `${meta.cw} / ${meta.ch}`;
        ph.style.width = meta.cw + 'px';
      } else {
        ph.style.width = '100%';
        ph.style.aspectRatio = '3 / 4'; // Typeform ist oft höher – gern anpassen
      }

      iframe.parentNode.insertBefore(ph, iframe);
      iframe.parentNode.removeChild(iframe);
    }

    /* ================= Placeholder -> Iframe ================= */
    function restoreTypeformFromPlaceholder(ph) {
      const src = ph.getAttribute('data-typeform-src');
      if (!src) return;

      const f = document.createElement('iframe');
      f.src = src;

      // Ursprungs-Styles/Klassen/Attribute übernehmen
      const cls = ph.dataset.className || '';
      if (cls) f.className = cls;

      const style = ph.dataset.style || '';
      if (style) f.setAttribute('style', style);

      const w = ph.dataset.widthAttr || ph.dataset.cw || '';
      const h = ph.dataset.heightAttr || ph.dataset.ch || '';
      if (w && h) {
        f.setAttribute('width', String(w));
        f.setAttribute('height', String(h));
      } else {
        f.style.width = '100%';
        f.style.height = '100%';
      }

      f.setAttribute('frameborder', '0');
      f.setAttribute(
        'allow',
        ph.dataset.allow || 'camera; microphone; geolocation; clipboard-read; clipboard-write; autoplay'
      );
      if (ph.dataset.allowFull) f.setAttribute('allowfullscreen', '');

      const wrap = document.createElement('div');
      wrap.className = 'typeform-consent-embed';
      wrap.style.width = ph.style.width || '100%';
      if (ph.style.aspectRatio) wrap.style.aspectRatio = ph.style.aspectRatio;

      wrap.appendChild(f);
      ph.parentNode.replaceChild(wrap, ph);
    }

    /* ================= Skripte (embed.js) blocken / rehydrieren ================= */
    function markBlockedScript(node) {
      node.setAttribute('data-tf-blocked', '1');
      node.setAttribute('data-tf-src', node.src || '');
      try {
        node.removeAttribute('src');
      } catch (e) {}
      node.type = 'text/plain';
      log('blocked Typeform script', node.getAttribute('data-tf-src'));
    }

    async function restoreBlockedScripts() {
      if (!hasMarketingConsent()) return;
      const blocked = Array.from(document.querySelectorAll('script[data-tf-blocked="1"]'));
      for (const s of blocked) {
        const src = s.getAttribute('data-tf-src');
        if (!src) continue;
        await new Promise((res, rej) => {
          const el = document.createElement('script');
          el.src = src;
          el.async = true;
          el.onload = res;
          el.onerror = rej;
          document.head.appendChild(el);
        });
      }
    }

    /* ================= Sammelfunktionen ================= */
    function blockAllTypeform(context) {
      const root = context || document;
      // iframes
      root.querySelectorAll('iframe').forEach((ifr) => {
        if (!hasMarketingConsent() && isTypeformIframe(ifr)) replaceIframeWithPlaceholder(ifr);
      });
      // scripts
      root.querySelectorAll('script[src]').forEach((sc) => {
        if (!hasMarketingConsent() && isTypeformScript(sc)) markBlockedScript(sc);
      });
    }

    function restoreAllPlaceholders() {
      if (!hasMarketingConsent()) return;
      document.querySelectorAll('.typeform-consent-placeholder').forEach(restoreTypeformFromPlaceholder);
      restoreBlockedScripts();
    }

    /* ================= Initial & Dynamik ================= */
    // Initial
    if (!hasMarketingConsent()) {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => blockAllTypeform(document));
      } else {
        blockAllTypeform(document);
      }
    }

    // Dynamisch nachgeladen
    new MutationObserver((ml) => {
      const consent = hasMarketingConsent();
      for (const m of ml)
        for (const n of m.addedNodes) {
          if (n && n.tagName === 'IFRAME' && isTypeformIframe(n)) {
            if (!consent) replaceIframeWithPlaceholder(n);
          } else if (n && n.tagName === 'SCRIPT' && isTypeformScript(n)) {
            if (!consent) markBlockedScript(n);
          } else if (n && n.querySelectorAll) {
            if (!consent) {
              n.querySelectorAll('iframe').forEach((ifr) => isTypeformIframe(ifr) && replaceIframeWithPlaceholder(ifr));
              n.querySelectorAll('script[src]').forEach((sc) => isTypeformScript(sc) && markBlockedScript(sc));
            }
          }
        }
    }).observe(document.documentElement, { childList: true, subtree: true });

    /* ================= State-Enforcer (Opt-in & Widerruf) ================= */
    function enforceTypeformConsentState() {
      if (hasMarketingConsent()) {
        restoreAllPlaceholders();
      } else {
        // bei Widerruf: laufende Einbettungen wieder blocken
        document
          .querySelectorAll('iframe')
          .forEach((ifr) => isTypeformIframe(ifr) && replaceIframeWithPlaceholder(ifr));
      }
    }
    window.addEventListener('CookiebotOnConsentReady', enforceTypeformConsentState);
    window.addEventListener('CookiebotOnAccept', enforceTypeformConsentState);
    window.addEventListener('CookiebotOnDecline', enforceTypeformConsentState);

    /* ========= Minimal-CSS (optional ins Theme-CSS) ================= */
    const css = `
    .typeform-consent-placeholder,
    .typeform-consent-embed{ display:block; max-width:100%; }
    .typeform-consent-embed{ position:relative; }
    .typeform-consent-embed iframe{ width:100%; height:100%; display:block; }

    .typeform-consent-placeholder{
      border:1px solid #e5e5e5; background:#fafafa;
      padding:16px; text-align:center; margin:8px 0; width:100%;
    }
    .typeform-consent-title{ font-weight:600; margin-bottom:4px; }
    .typeform-consent-text{ font-size:14px; color:#444; margin-bottom:10px; }
    .typeform-consent-actions button{
      margin:0 4px; padding:8px 12px; cursor:pointer; border-radius:6px;
    }
    .typeform-consent-actions .typeform-consent-allow{
      background:#222; color:#fff; border:0;
    }
    .typeform-consent-actions .typeform-consent-settings{
      background:#fff; color:#222; border:1px solid #222;
    }
  `;
    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);
  })();
</script>

<!-- Block Typeform End until Markting Consent (edit Michael Müller 9.9.25) -->
