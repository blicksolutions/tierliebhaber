<script>
(function(){
  // ---- Toggle debug logs in console
  window.DEBUG_CONSENT = window.DEBUG_CONSENT || false;
  const log = (...args) => { if (window.DEBUG_CONSENT) { try { console.log('[consent]', ...args); } catch(e){} } };

  // ---- Consent check (Cookiebot first, cookie fallback second)
  function hasConsent(cat){
    try {
      if (window.Cookiebot && Cookiebot.consent) {
        if (cat === 'marketing')   return !!Cookiebot.consent.marketing;
        if (cat === 'statistics')  return !!Cookiebot.consent.statistics;
        if (cat === 'preferences') return !!Cookiebot.consent.preferences;
        if (cat === 'necessary')   return true;
        return false;
      }
      // Fallback: parse "CookieConsent" cookie (Cookiebot writes this)
      const row = document.cookie.split('; ').find(r => r.startsWith('CookieConsent='));
      if (!row) return false;
      const v = decodeURIComponent(row.split('=')[1] || '');
      const map = {
        marketing:   /marketing:true/.test(v),
        statistics:  /statistics:true/.test(v),
        preferences: /preferences:true/.test(v)
      };
      return !!map[cat];
    } catch(e){ return false; }
  }

  // ---- Guard marketing cookies (Elevar/Klaviyo) until consent
  const cookieDesc =
    Object.getOwnPropertyDescriptor(Document.prototype,'cookie') ||
    Object.getOwnPropertyDescriptor(HTMLDocument.prototype,'cookie');
  if (cookieDesc && cookieDesc.set) {
    Object.defineProperty(document,'cookie',{
      configurable: true,
      enumerable: true,
      get: cookieDesc.get,
      set: function(v){
        try {
          // Add any other marketing cookies you want to guard here:
          if (v && (/_Elevar/i.test(v) || /__kla_id/i.test(v) || /_ke=/.test(v) || /KL_FORMS/.test(v))) {
            if (!hasConsent('marketing')) { log('blocked cookie (marketing)', v); return; }
          }
        } catch(e){}
        return cookieDesc.set.call(this, v);
      }
    });
  }

  // ---- Domain → category map for script gating
  const MAP = {
    'polyfill-fastly.net': 'preferences', // Functional
    'error-analytics-sessions-production.shopifysvc.com': 'statistics' // Shopify Error Analytics
  };
  const domains = Object.keys(MAP);

  const hostOf = u => { try { return new URL(u, location.href).hostname; } catch(e){ return ''; } };
  const catFor = u => {
    const h = hostOf(u); if (!h) return null;
    for (const d of domains) { if (h === d || h.endsWith('.' + d)) return MAP[d]; }
    return null;
  };
  const shouldBlock = u => { const c = catFor(u||''); return c ? !hasConsent(c) : false; };

  const pending = [];
  function copyAttrs(el){
    const o = {};
    for (const a of (el.attributes || [])) o[a.name] = a.value;
    return o;
  }
  function queue(el, src){
    pending.push({
      src,
      attrs: copyAttrs(el),
      async: el.async, defer: el.defer, nonce: el.nonce,
      referrerPolicy: el.referrerPolicy, crossOrigin: el.crossOrigin, integrity: el.integrity
    });
    log('blocked script', src, 'cat:', catFor(src));
  }
  function release(){
    for (let i = pending.length - 1; i >= 0; i--){
      const r = pending[i], c = catFor(r.src || '');
      if (!c || hasConsent(c)){
        const s = document.createElement('script');
        if (r.nonce) s.nonce = r.nonce;
        if (r.async != null) s.async = r.async;
        if (r.defer != null) s.defer = r.defer;
        if (r.referrerPolicy) s.referrerPolicy = r.referrerPolicy;
        if (r.crossOrigin) s.crossOrigin = r.crossOrigin;
        if (r.integrity) s.integrity = r.integrity;
        for (const [k,v] of Object.entries(r.attrs || {})){
          const kk = k.toLowerCase();
          if (!['src','async','defer','nonce','referrerpolicy','crossorigin','integrity','type'].includes(kk)) {
            try { s.setAttribute(k, v); } catch(e){}
          }
        }
        s.src = r.src;
        (document.head || document.documentElement).appendChild(s);
        log('released script', r.src, c);
        pending.splice(i,1);
      }
    }
  }

  // Intercept dynamic script loads (createElement, appendChild/insertBefore, and .src setter)
  const OrigCreate = document.createElement;
  const OrigAppend = Element.prototype.appendChild;
  const OrigBefore = Element.prototype.insertBefore;
  const OrigSetAttr = Element.prototype.setAttribute;

  document.createElement = function(tag){
    const el = OrigCreate.call(document, tag);
    if (String(tag).toLowerCase() === 'script'){
      el.setAttribute = function(name, value){
        if (String(name).toLowerCase() === 'src' && shouldBlock(value)) { queue(el, value); return; }
        return OrigSetAttr.call(el, name, value);
      };
    }
    return el;
  };
  Element.prototype.appendChild = function(ch){
    if (ch && ch.tagName === 'SCRIPT'){
      const src = ch.getAttribute && ch.getAttribute('src');
      if (src && shouldBlock(src)) { queue(ch, src); return ch; }
    }
    return OrigAppend.call(this, ch);
  };
  Element.prototype.insertBefore = function(n, r){
    if (n && n.tagName === 'SCRIPT'){
      const src = n.getAttribute && n.getAttribute('src');
      if (src && shouldBlock(src)) { queue(n, src); return n; }
    }
    return OrigBefore.call(this, n, r);
  };

  const srcDesc = Object.getOwnPropertyDescriptor(HTMLScriptElement.prototype,'src');
  if (srcDesc && srcDesc.set){
    Object.defineProperty(HTMLScriptElement.prototype,'src',{
      configurable: true,
      get(){ return srcDesc.get.call(this); },
      set(v){ if (shouldBlock(v)) { queue(this, v); return v; } return srcDesc.set.call(this, v); }
    });
  }

  // Release when Cookiebot reports consent (or fallback timer)
  window.addEventListener('CookiebotOnConsentReady', release);
  window.addEventListener('CookiebotOnAccept', release);
  window.addEventListener('CookiebotOnDecline', release);
  setTimeout(release, 2000);
})();
</script>

<script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="a4aa9c1a-9639-4e9f-8a23-4aef9c37b3cc" data-blockingmode="manual" type="text/javascript"></script>



<script>
  <script>
(function(){
  /* ================= Helpers / Consent ================= */
  const log = (...a)=>{ try{ console.debug('[VIMEO CONSENT]',...a);}catch(e){} };

  function hasMarketingConsent(){
    try {
      if (typeof Cookiebot !== 'undefined') {
        if (Cookiebot.consents && typeof Cookiebot.consents.marketing === 'boolean') return Cookiebot.consents.marketing;
        if (Cookiebot.consent  && typeof Cookiebot.consent.marketing  === 'boolean') return Cookiebot.consent.marketing;
      }
      // Fallback: CookieConsent-String (Cookiebot)
      const cc = document.cookie.split('; ').find(r=>r.startsWith('CookieConsent='));
      return cc ? decodeURIComponent(cc.split('=')[1]).includes('marketing:true') : false;
    } catch(e){ return false; }
  }

  function isVimeoIframe(node){
    return node && node.tagName === 'IFRAME' && /(^|\/\/)(player\.)?vimeo\.com/i.test(node.src || '');
  }

  /* ============== Placeholder UI ============== */
  function makePlaceholder(src){
    const wrap = document.createElement('div');
    wrap.className = 'vimeo-consent-placeholder';
    wrap.setAttribute('data-vimeo-src', src);
    wrap.innerHTML = `
      <div class="vimeo-consent-box">
        <div class="vimeo-consent-title">Vimeo-Video blockiert</div>
        <div class="vimeo-consent-text">Zum Abspielen bitte Marketing-Cookies zulassen.</div>
        <div class="vimeo-consent-actions">
          <button type="button" class="vimeo-consent-allow">Marketing akzeptieren & Video laden</button>
          <button type="button" class="vimeo-consent-settings">Einstellungen öffnen</button>
        </div>
      </div>
    `;
    wrap.querySelector('.vimeo-consent-allow').addEventListener('click', function(){
      // Im manuellen Modus: Consent-Dialog öffnen; nach Zustimmung wird unten automatisch wiederhergestellt
      if (typeof Cookiebot !== 'undefined' && typeof Cookiebot.show === 'function') {
        Cookiebot.show();
      } else {
        alert('Bitte Marketing-Cookies in den Cookie-Einstellungen aktivieren.');
      }
    });
    wrap.querySelector('.vimeo-consent-settings').addEventListener('click', function(){
      if (typeof Cookiebot !== 'undefined' && typeof Cookiebot.show === 'function') Cookiebot.show();
    });
    return wrap;
  }

  /* ============== Größen-Fix: Original-Meta merken ============== */
  function snapshotIframeMeta(ifr){
    const rect = ifr.getBoundingClientRect();
    return {
      widthAttr:  ifr.getAttribute('width')  || '',
      heightAttr: ifr.getAttribute('height') || '',
      style:      ifr.getAttribute('style')  || '',
      className:  ifr.className || '',
      allow:      ifr.getAttribute('allow') || 'autoplay; fullscreen; picture-in-picture',
      allowFull:  ifr.hasAttribute('allowfullscreen') ? '1' : '',
      // Fallback auf berechnete Größe, falls width/height fehlen
      cw: Math.round(rect.width)  || '',
      ch: Math.round(rect.height) || ''
    };
  }

  /* ============== ERSETZEN: Iframe -> Placeholder ============== */
  function replaceIframeWithPlaceholder(iframe){
    if (iframe.hasAttribute('data-consent-exempt')) return; // Einzelnes Iframe ausnehmen
    const meta = snapshotIframeMeta(iframe);
    const src = iframe.src;

    const ph = makePlaceholder(src);
    // Original-Meta am Placeholder speichern
    Object.entries(meta).forEach(([k,v]) => ph.dataset[k] = v);

    // Placeholder dimensionieren (Original bevorzugt; sonst 16:9 responsive)
    if (meta.widthAttr && meta.heightAttr) {
      ph.style.aspectRatio = `${meta.widthAttr} / ${meta.heightAttr}`;
      ph.style.width = /^\d+$/.test(meta.widthAttr) ? meta.widthAttr+'px' : meta.widthAttr;
    } else if (meta.cw && meta.ch) {
      ph.style.aspectRatio = `${meta.cw} / ${meta.ch}`;
      ph.style.width = meta.cw + 'px';
    } else {
      ph.style.width = '100%';
      ph.style.aspectRatio = '16 / 9';
    }

    // Original-IFRAME entfernen, Placeholder einsetzen
    iframe.parentNode.insertBefore(ph, iframe);
    iframe.parentNode.removeChild(iframe);
  }

  /* ============== WIEDERHERSTELLEN: Placeholder -> Iframe ============== */
  function restoreVimeoFromPlaceholder(ph){
    const src = ph.getAttribute('data-vimeo-src');
    if (!src) return;

    const f = document.createElement('iframe');
    f.src = src;

    // Ursprungs-Styles/Klassen/Attribute übernehmen
    const cls = ph.dataset.className || '';
    if (cls) f.className = cls;

    const style = ph.dataset.style || '';
    if (style) f.setAttribute('style', style);

    const w = ph.dataset.widthAttr || ph.dataset.cw || '';
    const h = ph.dataset.heightAttr || ph.dataset.ch || '';
    if (w && h) {
      f.setAttribute('width', String(w));
      f.setAttribute('height', String(h));
    } else {
      // Fallback: responsive im Wrapper
      f.style.width = '100%';
      f.style.height = '100%';
    }

    f.setAttribute('frameborder','0');
    f.setAttribute('allow', ph.dataset.allow || 'autoplay; fullscreen; picture-in-picture');
    if (ph.dataset.allowFull) f.setAttribute('allowfullscreen','');

    // Wrapper übernimmt die Größe/Aspect-Ratio des Platzhalters
    const wrap = document.createElement('div');
    wrap.className = 'vimeo-consent-embed';
    wrap.style.width = ph.style.width || '100%';
    if (ph.style.aspectRatio) wrap.style.aspectRatio = ph.style.aspectRatio;

    wrap.appendChild(f);
    ph.parentNode.replaceChild(wrap, ph);
  }

  /* ============== Apply / Restore ============== */
  function blockAllVimeoIframes(context){
    const root = context || document;
    root.querySelectorAll('iframe[src*="vimeo.com"]').forEach(ifr=>{
      if (!hasMarketingConsent()) replaceIframeWithPlaceholder(ifr);
    });
  }

  function restoreAllPlaceholders(){
    if (!hasMarketingConsent()) return;
    document.querySelectorAll('.vimeo-consent-placeholder').forEach(restoreVimeoFromPlaceholder);
  }

  /* ============== Initial & Dynamik ============== */
  // Initial: vorhandene iFrames prüfen
  if (!hasMarketingConsent()) {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', ()=> blockAllVimeoIframes(document));
    } else {
      blockAllVimeoIframes(document);
    }
  }

  // Dynamisch nachgeladene iFrames abfangen
  new MutationObserver((ml)=>{
    if (hasMarketingConsent()) return;
    for (const m of ml) for (const n of m.addedNodes) {
      if (isVimeoIframe(n)) replaceIframeWithPlaceholder(n);
      else if (n && n.querySelectorAll) n.querySelectorAll('iframe[src*="vimeo.com"]').forEach(replaceIframeWithPlaceholder);
    }
  }).observe(document.documentElement, { childList:true, subtree:true });

  // Nach Einwilligung automatisch freischalten
  window.addEventListener('CookiebotOnConsentReady', restoreAllPlaceholders);
  window.addEventListener('CookiebotOnAccept',      restoreAllPlaceholders);

  /* ============== Minimal-CSS (optional ins Theme-CSS verschieben) ============== */
  const css = `
    .vimeo-consent-placeholder,
    .vimeo-consent-embed{ display:block; max-width:100%; }
    .vimeo-consent-embed{ position:relative; }
    .vimeo-consent-embed iframe{ width:100%; height:100%; display:block; }

    .vimeo-consent-placeholder{
      border:1px solid #e5e5e5; background:#fafafa;
      padding:16px; text-align:center; margin:8px 0;
      width:100%;
    }
    .vimeo-consent-title{ font-weight:600; margin-bottom:4px; }
    .vimeo-consent-text{ font-size:14px; color:#444; margin-bottom:10px; }
    .vimeo-consent-actions button{
      margin:0 4px; padding:8px 12px; cursor:pointer; border-radius:6px;
    }
    .vimeo-consent-actions .vimeo-consent-allow{
      background:#222; color:#fff; border:0;
    }
    .vimeo-consent-actions .vimeo-consent-settings{
      background:#fff; color:#222; border:1px solid #222;
    }
  `;
  const style = document.createElement('style');
  style.textContent = css;
  document.head.appendChild(style);
})();
</script>

</script>


