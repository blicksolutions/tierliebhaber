<!doctype html>

<html class="no-js" lang="{{ shop.locale }}">
  <head>
<script>
(function () {
  const DEBUG = false;
  const log = (...a) => { if (DEBUG && window.console) console.log('[CB-Enhanced]', ...a); };

  // 1) Matchers
  const isRechargeUrl = (u) => typeof u === 'string' && /recharge/i.test(u);
  const isRechargeScript = (el) => {
    if (!el || el.tagName !== 'SCRIPT') return false;
    if (isRechargeUrl(el.src)) return true;
    // Some apps inject inline bootstrap that references recharge later
    return /recharge/i.test(el.textContent || '');
  };

  // Elevar detection
  const isElevarUrl = (u) => typeof u === 'string' && /elevar/i.test(u);
  const isElevarScript = (el) => {
    if (!el || el.tagName !== 'SCRIPT') return false;
    if (isElevarUrl(el.src)) return true;
    // Check for Elevar in script content, including _Elevar references
    return /elevar|_Elevar/i.test(el.textContent || '');
  };

  // NEW: Marketing consent required scripts detection
  const marketingDomains = [
    'monorail-edge.shopifysvc.com',
    'shopify-gtm-suite.getelevar.com',
    'admin.revenuehunt.com',
    'data.replo.app',
    'analytics-api.gemcommerce.com'
  ];

  const isMarketingScript = (el) => {
    if (!el || el.tagName !== 'SCRIPT') return false;
    const src = el.src || '';
    return marketingDomains.some(domain => src.includes(domain));
  };

  // 2) Tag to bypass Cookiebot auto-blocking
  const tagIgnore = (el) => {
    if (el.getAttribute('data-cookieconsent') !== 'ignore') {
      el.setAttribute('data-cookieconsent', 'ignore');
      log('tagged ignore', el);
    }
  };

  // Tag to ensure Cookiebot blocks until marketing consent
  const tagMarketing = (el) => {
    if (el.getAttribute('data-cookieconsent') !== 'marketing') {
      el.setAttribute('data-cookieconsent', 'marketing');
      // Also change script type to text/plain to ensure blocking
      if (el.tagName === 'SCRIPT' && el.type !== 'text/plain') {
        el.type = 'text/javascript'; // Keep as javascript but with marketing consent
      }
      log('tagged marketing', el);
    }
  };

  // 3) Copy attributes when we need to rehydrate
  const copyAttrs = (from, to) => {
    for (const { name, value } of Array.from(from.attributes)) {
      if (name === 'type' || name === 'data-cookieconsent') continue;
      to.setAttribute(name, value);
    }
  };

  // 4) If Cookiebot already blocked (type="text/plain"), re-create as live script
  const rehydrateIfBlocked = (el) => {
    if (!el || el.tagName !== 'SCRIPT') return;
    const isPlain = (el.type || '').toLowerCase() === 'text/plain';
    const hasCBAttr = el.hasAttribute('data-cookieconsent');
    if (!isPlain || !hasCBAttr) return;

    const url = el.getAttribute('src') || el.getAttribute('data-src') || '';
    const looksRecharge = isRechargeUrl(url) || /recharge/i.test(el.textContent || '');
    if (!looksRecharge) return;

    const live = document.createElement('script');
    copyAttrs(el, live);
    const src = el.getAttribute('src') || el.getAttribute('data-src');
    if (src) live.src = src;
    live.async = el.async;
    live.defer = el.defer;
    live.type = 'text/javascript';
    live.setAttribute('data-cookieconsent', 'ignore');
    el.parentNode.insertBefore(live, el.nextSibling);
    log('rehydrated', live);
  };

  // Function to check marketing consent
  function checkMarketingConsent() {
    try {
      // Check if Cookiebot is available and consent is given
      if (typeof Cookiebot !== 'undefined' && Cookiebot.consent) {
        return Cookiebot.consent.marketing === true;
      }
      
      // Fallback: check cookie consent string
      const consentCookie = document.cookie
        .split('; ')
        .find(row => row.startsWith('CookieConsent='));
      
      if (consentCookie) {
        const consentValue = consentCookie.split('=')[1];
        return consentValue.includes('marketing:true');
      }
      
      return false; // Default to no consent
    } catch (e) {
      log('Error checking consent:', e);
      return false;
    }
  }

  // Prevent Elevar cookies by intercepting document.cookie writes
  const originalCookieDescriptor = Object.getOwnPropertyDescriptor(Document.prototype, 'cookie');
  if (originalCookieDescriptor && originalCookieDescriptor.set) {
    Object.defineProperty(document, 'cookie', {
      get: originalCookieDescriptor.get,
      set: function(value) {
        // Check if this is an Elevar cookie and if marketing consent is given
        if (value && /_Elevar-apex/i.test(value)) {
          // Check if marketing consent is given
          const hasMarketingConsent = checkMarketingConsent();
          if (!hasMarketingConsent) {
            log('Blocked Elevar cookie write:', value);
            return; // Block the cookie write
          }
        }
        // Allow the cookie write
        originalCookieDescriptor.set.call(this, value);
      }
    });
  }

  // NEW: Prevent localStorage writes for specific keys until consent
  const blockedStorageKeys = ['triplePixel', 'TriplePixelU', 'gemx_campaign'];
  
  if (typeof Storage !== 'undefined' && window.localStorage) {
    const originalSetItem = localStorage.setItem;
    const originalRemoveItem = localStorage.removeItem;
    
    localStorage.setItem = function(key, value) {
      if (blockedStorageKeys.includes(key)) {
        const hasMarketingConsent = checkMarketingConsent();
        if (!hasMarketingConsent) {
          log('Blocked localStorage write for key:', key);
          return;
        }
      }
      return originalSetItem.call(this, key, value);
    };

    // Also prevent removing these keys to avoid workarounds
    localStorage.removeItem = function(key) {
      if (blockedStorageKeys.includes(key)) {
        const hasMarketingConsent = checkMarketingConsent();
        if (!hasMarketingConsent) {
          log('Blocked localStorage remove for key:', key);
          return;
        }
      }
      return originalRemoveItem.call(this, key);
    };
  }

  // 5) Tag existing nodes
  document.querySelectorAll('script').forEach(s => {
    if (isRechargeScript(s)) {
      tagIgnore(s);
    } else if (isElevarScript(s) || isMarketingScript(s)) {
      tagMarketing(s);
    }
    rehydrateIfBlocked(s);
  });
  document.querySelectorAll('link[rel="preload"][as="script"][href]').forEach(l => {
    if (isRechargeUrl(l.href)) {
      tagIgnore(l);
    } else if (isElevarUrl(l.href) || marketingDomains.some(domain => l.href.includes(domain))) {
      tagMarketing(l);
    }
  });

  // 6) Watch for new nodes + attribute changes (src, href, type, data-src)
  const mo = new MutationObserver(muts => {
    for (const m of muts) {
      if (m.type === 'childList') {
        m.addedNodes.forEach(n => {
          if (n.nodeType !== 1) return;
          if (n.tagName === 'SCRIPT') {
            if (isRechargeScript(n)) {
              tagIgnore(n);
              rehydrateIfBlocked(n);
            } else if (isElevarScript(n) || isMarketingScript(n)) {
              tagMarketing(n);
            }
          } else if (n.tagName === 'LINK' && n.rel === 'preload' && (n.as === 'script' || n.getAttribute('as') === 'script')) {
            if (isRechargeUrl(n.href)) {
              tagIgnore(n);
            } else if (isElevarUrl(n.href) || marketingDomains.some(domain => n.href.includes(domain))) {
              tagMarketing(n);
            }
          }
        });
      } else if (m.type === 'attributes') {
        const el = m.target;
        if (el.tagName === 'SCRIPT') {
          if (m.attributeName === 'src' || m.attributeName === 'type' || m.attributeName === 'data-src') {
            if (isRechargeScript(el)) {
              tagIgnore(el);
              rehydrateIfBlocked(el);
            } else if (isElevarScript(el) || isMarketingScript(el)) {
              tagMarketing(el);
            }
          }
        } else if (el.tagName === 'LINK' && m.attributeName === 'href') {
          if (el.rel === 'preload' && (el.as === 'script' || el.getAttribute('as') === 'script')) {
            if (isRechargeUrl(el.href)) {
              tagIgnore(el);
            } else if (isElevarUrl(el.href) || marketingDomains.some(domain => el.href.includes(domain))) {
              tagMarketing(el);
            }
          }
        }
      }
    }
  });

  mo.observe(document.documentElement, {
    childList: true,
    subtree: true,
    attributes: true,
    attributeFilter: ['src', 'href', 'type', 'data-src']
  });
})();
</script>
<script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="a4aa9c1a-9639-4e9f-8a23-4aef9c37b3cc" data-blockingmode="auto" type="text/javascript"></script>

	<link rel="stylesheet" href="{{ 'bs-ab-tlh-010.css' | asset_url }}">
  <link rel="stylesheet" href="{{ 'ds-op-lp-3.css' | asset_url }}">

	  <script type="text/plain" data-cookieconsent="marketing" src="{{ 'bs-ab-tlh001.js' | asset_url }}"></script>
	  <script type="text/plain" data-cookieconsent="marketing" src="{{ 'bs-ab-tlh004.js' | asset_url }}"></script>
	  <script type="text/plain" data-cookieconsent="marketing" src="{{ 'bs-ab-tlh-009.js' | asset_url }}"></script>
	  <script type="text/plain" data-cookieconsent="marketing" src="{{ 'bs-ab-tlh-010.js' | asset_url }}"></script>
	  <script type="text/plain" data-cookieconsent="marketing" src="{{ 'bs-ab-tlh-011.js' | asset_url }}"></script>
	  <script type="text/plain" data-cookieconsent="marketing" src="{{ 'bs-ab-tlh-025.js' | asset_url }}"></script>

    <script type="text/plain" data-cookieconsent="marketing">
      fetch('/browsing_context_suggestions.json')
       .then(response => response.json())
       .then(json => {
        if(json.detected_values.country.handle == "DE") {
      	  window.isDeVisitor = true;
        } else {
      	  window.isDeVisitor = false;
        }
       });
    </script>

    <script type="text/plain" data-cookieconsent="marketing" src="https://cdn.ablyft.com/s/55886406.js"></script>
    <script type="text/plain" data-cookieconsent="marketing">
      window['ablyft'] = window['ablyft'] || [];
    </script>

    
    <script type="text/plain" data-cookieconsent="marketing">
      document.addEventListener('DOMContentLoaded',() => {
          document.querySelector('.Search__Inner').addEventListener('click',() =>  {
              window['ablyft'].push({
                  eventType: 'custom',
                  eventName: 'tlh-026-clicks-on-searchbar',
                  eventValue: 1
              });
          });
      });
    </script>

    {% render 'replo-head' %}

    <script src="{{ 'bs-load-third-party-scripts.js' | asset_url }}" defer></script>
    <script src="{{ 'bs-subscription-callout.js' | asset_url }}" defer></script>
    <script src="{{ 'bs-sticky-atc.js' | asset_url }}" defer></script>
    <script src="{{ 'bs-mobile-sidebar-nav.js' | asset_url }}" defer></script>

    <script type="text/plain" data-cookieconsent="marketing">
      var AWIN = AWIN || {};
      AWIN.Tracking = AWIN.Tracking || {};
      AWIN.Tracking.AdvertiserConsent = false;

      let documentCookies = document.cookie;
      let prefix = 'CookieConsent' + '=';
      let begin = documentCookies.indexOf('; ' + prefix);
      let end;

      if (begin == -1) {
      	begin = documentCookies.indexOf(prefix);
      	if (begin != 0) return null;
      } else {
      	begin += 2;
      	end = document.cookie.indexOf(';', begin);
      	if (end == -1) {
      		end = documentCookies.length;
      	}
      }
      const consentCookie = decodeURI(documentCookies.substring(begin + prefix.length, end));
      if (consentCookie.includes('necessary:true') && consentCookie.includes('preferences:true') && consentCookie.includes('statistics:true') && consentCookie.includes('marketing:true')) {
      	AWIN.Tracking.Consent.setAdvertiserConsentStatus(true)
      } else {
      	AWIN.Tracking.Consent.setAdvertiserConsentStatus(false)
      }
    </script>

    <script>
      window.SLIDECART_DISABLE = true
    </script>
    
    <link rel="stylesheet" href="{{ 'slick.css' | asset_url }}">
    <link rel="stylesheet" href="{{ 'slick-theme.css' | asset_url }}">
    <script src="{{ 'slick.min.js' | asset_url }}" defer></script>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, maximum-scale=1.0"
    >
    <meta name="theme-color" content="{{ settings.accent_color }}">
    <meta name="google-site-verification" content="QZiR1WxDnZAKrxARkf6DQjhHzK1Y3t4Oo5I1TMO2Sgo">
    <meta name="google-site-verification" content="Yq9dF4MhfrxG4y9GADuu6whPXKYTFZ4vQ3O52SZWsas" />

    {%- if request.path == '/collections/vendors' -%}
      {%- assign lowercase_vendors = shop.vendors | join: ',' | downcase | split: ',' -%}
      {%- assign lowercase_input = collection.title | downcase -%}
      {%- unless lowercase_vendors contains lowercase_input -%}
        <meta name="robots" content="noindex">
      {%- endunless -%}
    {%- endif -%}

    <title>
      {{ page_title }}
      {% if current_tags -%}
        {%- assign meta_tags = current_tags | join: ', ' %} &ndash; {{ 'general.meta.tags' | t: tags: meta_tags -}}
      {%- endif %}
      {% if current_page != 1 %} &ndash; {{ 'general.meta.page' | t: page: current_page }}{% endif %}
      {% unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless %}
    </title>

      <link rel="stylesheet" href="{{ 'swiper-bundle.min.css' | asset_url }}">
      <script src="{{ 'swiper-bundle.min.js' | asset_url }}" defer></script>

    {%- if page_description -%}
      <meta name="description" content="{{ page_description | escape }}">
    {%- endif -%}

    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon -%}
      <link rel="shortcut icon" href="{{ settings.favicon | img_url: '96x' }}" type="image/png">
    {%- endif -%}

    <script>
      window.experiments = {
        data: {
          product: {
            id: {{ product.id | json }},
            title: {{ product.title | json }},
          },
        },
      };
    </script>

    <script>
      window.enable_superchat = {{ settings.enable_superchat }};
      window.superchat_delay = {{ settings.superchat_delay | times: 1000 }}
    </script>

    {% render 'social-meta-tags' %}
    {% render 'css-variables' %}

    {{ content_for_header }}
   {% render 'cookie-consent' %}

    
    <link rel="stylesheet" href="{{ 'bs-mobile-sidebar-nav.css' | asset_url }}">

    <link rel="stylesheet" href="{{ 'theme.css' | asset_url }}">
    <link rel="stylesheet" href="{{ 'bs-custom.css' | asset_url }}">
    <link rel="stylesheet" href="{{ 'recommended-search-products.css' | asset_url }}">

    {%- render 'head-styles', layout: 'theme' -%}

    <script>
          {%- if request.page_type == 'policy' -%}
            document.addEventListener('DOMContentLoaded', function() {
              document.querySelector('.shopify-policy__title').classList.add('PageHeader', 'Heading', 'u-h1');
              document.querySelector('.shopify-policy__body').classList.add('Rte');
            });

      setTimeout(()=>{
                const cookieDeclaration = document.querySelector('.CookieDeclaration__injection')
                const cookieDeclarationScript = document.createElement('script')

                cookieDeclarationScript.setAttribute('id','CookieDeclaration');
                cookieDeclarationScript.setAttribute('src','https://consent.cookiebot.com/a4aa9c1a-9639-4e9f-8a23-4aef9c37b3cc/cd.js');
                cookieDeclarationScript.setAttribute('type','text/javascript');
                cookieDeclarationScript.setAttribute('async','true');

                cookieDeclaration.appendChild(cookieDeclarationScript)
            },500)

          {%- endif -%}

          window.theme = {
            pageType: {{ request.page_type | json }},
            moneyFormat: {{ shop.money_format | json }},
            moneyWithCurrencyFormat: {{ shop.money_with_currency_format | json }},
            productImageSize: {{ settings.product_image_size | json }},
            searchMode: {{ settings.search_mode | json }},
            showPageTransition: {{ settings.show_page_transition | json }},
            showElementStaggering: {{ settings.show_element_staggering | json }},
            showImageZooming: {{ settings.show_image_zooming | json }}
          };

          window.routes = {
            rootUrl: {{ routes.root_url | json }},
            rootUrlWithoutSlash: {% if routes.root_url == '/' %}''{% else %}{{ routes.root_url | json }}{% endif %},
            cartUrl: {{ routes.cart_url | json }},
            cartAddUrl: {{ routes.cart_add_url | json }},
            cartChangeUrl: {{ routes.cart_change_url | json }},
            searchUrl: {{ routes.search_url | json }},
            productRecommendationsUrl: {{ routes.product_recommendations_url | json }}
          };

          window.languages = {
            cartAddNote: {{ 'cart.general.add_note' | t | json }},
            cartEditNote: {{ 'cart.general.edit_note' | t | json }},
            productImageLoadingError: {{ 'product.slideshow.image_loading_error' | t | json }},
            productFormAddToCart: {% if product.template_suffix == 'pre-order' %}{{ 'product.form.pre_order' | t | json }}{% elsif product.template_suffix == 'donation' %}{{ 'product.form.add_to_cart_donation' | t | json }}{%else%}{{ 'product.form.add_to_cart' | t | json }}{% endif %},
            productFormUnavailable: {{ 'product.form.unavailable' | t | json }},
            productFormSoldOut: {{ 'product.form.sold_out' | t | json }},
            shippingEstimatorOneResult: {{ 'cart.shipping_estimator.one_result_title' | t | json }},
            shippingEstimatorMoreResults: {{ 'cart.shipping_estimator.more_results_title' | t | json }},
            shippingEstimatorNoResults: {{ 'cart.shipping_estimator.no_results_title' | t | json }}
          };

          window.lazySizesConfig = {
            loadHidden: false,
            hFac: 0.5,
            expFactor: 2,
            ricTimeout: 150,
            lazyClass: 'Image--lazyLoad',
            loadingClass: 'Image--lazyLoading',
            loadedClass: 'Image--lazyLoaded'
          };

          {% if customer %}
            window.Shopify.isUserLoggedIn = true;
          {% else %}
            window.Shopify.isUserLoggedIn = false;
          {% endif %}

          document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
          document.documentElement.style.setProperty('--window-height', window.innerHeight + 'px');

          (function() {
            document.documentElement.className += ((window.CSS && window.CSS.supports('(position: sticky) or (position: -webkit-sticky)')) ? ' supports-sticky' : ' no-supports-sticky');
            document.documentElement.className += (window.matchMedia('(-moz-touch-enabled: 1), (hover: none)')).matches ? ' no-supports-hover' : ' supports-hover';
          }());
    </script>

    <script src="{{ 'lazysizes.min.js' | asset_url }}" async></script>

    {%- if template == 'customers/addresses' -%}
      <script src="{{ 'shopify_common.js' | shopify_asset_url }}" defer></script>
      <script src="{{ 'customer_area.js' | shopify_asset_url }}" defer></script>
    {%- endif -%}

    <script
      src="https://cdn.polyfill.io/v3/polyfill.min.js?unknown=polyfill&features=fetch,Element.prototype.closest,Element.prototype.remove,Element.prototype.classList,Array.prototype.includes,Array.prototype.fill,Object.assign,CustomEvent,IntersectionObserver,IntersectionObserverEntry,URL"
      defer
    ></script>
    <script src="{{ 'libs.min.js' | asset_url }}" defer></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

    <script src="{{ 'theme.min.js' | asset_url }}" defer></script>
    <script src="{{ 'bs-cart-drawer.js' | asset_url }}" defer></script>
    <script src="{{ 'search-manipulation.js' | asset_url }}" defer></script>
    <script src="{{ 'bs-dentalspray-redirect.js' | asset_url }}"></script>

    <script>
      (function () {
        window.onpageshow = function() {
          if (window.theme.showPageTransition) {
            var pageTransition = document.querySelector('.PageTransition');

            if (pageTransition) {
              pageTransition.style.visibility = 'visible';
              pageTransition.style.opacity = '0';
            }
          }

          document.documentElement.dispatchEvent(new CustomEvent('cart:refresh', {
            bubbles: true
          }));
        };
      })();
    </script>

    {%- render 'head-scripts', layout: 'theme' -%}

    {% render 'microdata-schema' %}
    {% include 'ufe-offer' %}

    {% if template.name == 'index' %}
      <script type="text/plain" data-cookieconsent="marketing">
        !function(w,d,s,t,a){if(w.amzn)return;w.amzn=a=function(){w.amzn.q.push([arguments,(new Date).getTime()])};a.q=[];a.version="0.0";s=d.createElement("script");s.src="https://c.amazon-adsystem.com/aat/amzn.js";s.id="amzn-pixel";s.async=true;t=d.getElementsByTagName("script")[0];t.parentNode.insertBefore(s,t)}(window,document);
        amzn("setRegion", "EU");
        amzn("addTag", "9ed9779f-1bce-49a3-a8de-4434d6a6c0be");
        amzn("trackEvent", "PageView");
      </script>
    {% endif %}

    {% render 'rapid-search-settings' %}
  </head>

  {%- capture classes -%}features--heading-{{ settings.heading_size }}{%- endcapture -%}

  {%- if settings.uppercase_heading -%}
    {%- assign classes = classes | append: ' features--heading-uppercase' -%}
  {%- endif -%}

  {%- if settings.product_show_price_on_hover -%}
    {%- assign classes = classes | append: ' features--show-price-on-hover' -%}
  {%- endif -%}

  {%- if settings.show_page_transition -%}
    {%- assign classes = classes | append: ' features--show-page-transition' -%}
  {%- endif -%}

  {%- if settings.show_button_transition -%}
    {%- assign classes = classes | append: ' features--show-button-transition' -%}
  {%- endif -%}

  {%- if settings.show_image_zooming -%}
    {%- assign classes = classes | append: ' features--show-image-zooming' -%}
  {%- endif -%}

  {%- if settings.show_element_staggering -%}
    {%- assign classes = classes | append: ' features--show-element-staggering' -%}
  {%- endif -%}

  {%- assign shopCurrencySymbol = 100 | money | replace: '1.00' | replace: '1,00' -%}

  <body
    class="prestige--v4 {{ classes }} {% if template.directory %}template-{{ template.directory | handle }}{% endif %} template-{{ template.name | handle }}"
    data-currency-symbol="{{ shopCurrencySymbol }}"
  >

    <a class="PageSkipLink u-visually-hidden" href="#main">{{ 'header.navigation.skip_to_content' | t }}</a>
    <span class="LoadingBar"></span>
    <div class="PageOverlay"></div>

    {%- if settings.show_page_transition -%}
      <div class="PageTransition"></div>
    {%- endif -%}

    {% section 'popup' %}
    {% section 'sidebar-menu' %}

    {%- if template != 'cart' -%}
      {% section 'cart-drawer' %}
    {%- endif -%}

    <div class="PageContainer">
      {% section 'announcement' %}
      {% section 'header' %}

      <main id="main" role="main">
        {{ content_for_layout }}
      </main>
      {% section 'footer' %}
    </div>

    <script src="https://www.dwin1.com/86929.js" type="text/plain" data-cookieconsent="marketing" defer="defer"></script>

    <script src="https://widget.reviews.io/rating-snippet/dist.js"></script>
    <link rel="stylesheet" href="https://widget.reviews.io/rating-snippet/dist.css">
    <script>
      ratingSnippet("ruk_rating_snippet", {
        store: "tierliebhaber.de",
        mode: "default",
        color: "#fbd343",
        linebreak: false,
        text: "{{ 'product.tabs.reviews' | t }}",
        singularText: "{{ 'product.tabs.reviews_singular' | t }}",
        lang: "de",
        usePolaris: true,
        showEmptyStars: false,
      });
    </script>
    <script src="https://customized-whatsapp-widget.chatarmin.com/widget-fetcher.js?w_id=6811de72e886703c08521660&u_id=680a53d680aac276290b3339" async ></script>    
  </body>
</html>